//-----------------------------------------------------------------------------
//  File: RTC5expl.c                             Copyright (c) 2010 SCANLAB AG
//-----------------------------------------------------------------------------
//
//
//
//  Abstract
//      DLL handling functions for explicitly linking to the RTC5DLL.DLL
//      This file was automatically generated at 23.08.2012
//
//  Function List
//      RTC5open
//      RTC5close
//-----------------------------------------------------------------------------

#include "RTC5expl.h"
#include <tchar.h>

HINSTANCE gLibRTC5 = NULL;


namespace rtc5
{

INIT_RTC5_DLL init_rtc5_dll;
FREE_RTC5_DLL free_rtc5_dll;
SET_RTC4_MODE set_rtc4_mode;
SET_RTC5_MODE set_rtc5_mode;
GET_RTC_MODE get_rtc_mode;
N_GET_ERROR n_get_error;
N_GET_LAST_ERROR n_get_last_error;
N_RESET_ERROR n_reset_error;
N_SET_VERIFY n_set_verify;
GET_ERROR get_error;
GET_LAST_ERROR get_last_error;
RESET_ERROR reset_error;
SET_VERIFY set_verify;
VERIFY_CHECKSUM verify_checksum;
RTC5_COUNT_CARDS rtc5_count_cards;
ACQUIRE_RTC acquire_rtc;
RELEASE_RTC release_rtc;
SELECT_RTC select_rtc;
GET_DLL_VERSION get_dll_version;
N_GET_SERIAL_NUMBER n_get_serial_number;
N_GET_HEX_VERSION n_get_hex_version;
N_GET_RTC_VERSION n_get_rtc_version;
GET_SERIAL_NUMBER get_serial_number;
GET_HEX_VERSION get_hex_version;
GET_RTC_VERSION get_rtc_version;
N_LOAD_PROGRAM_FILE n_load_program_file;
N_SYNC_SLAVES n_sync_slaves;
N_GET_SYNC_STATUS n_get_sync_status;
N_LOAD_CORRECTION_FILE n_load_correction_file;
N_LOAD_Z_TABLE n_load_z_table;
N_SELECT_COR_TABLE n_select_cor_table;
N_SET_DSP_MODE n_set_dsp_mode;
N_LOAD_STRETCH_TABLE n_load_stretch_table;
N_GET_HEAD_PARA n_get_head_para;
N_GET_TABLE_PARA n_get_table_para;
LOAD_PROGRAM_FILE load_program_file;
SYNC_SLAVES sync_slaves;
GET_SYNC_STATUS get_sync_status;
LOAD_CORRECTION_FILE load_correction_file;
LOAD_Z_TABLE load_z_table;
SELECT_COR_TABLE select_cor_table;
SET_DSP_MODE set_dsp_mode;
LOAD_STRETCH_TABLE load_stretch_table;
GET_HEAD_PARA get_head_para;
GET_TABLE_PARA get_table_para;
N_CONFIG_LIST n_config_list;
N_GET_CONFIG_LIST n_get_config_list;
N_SAVE_DISK n_save_disk;
N_LOAD_DISK n_load_disk;
N_GET_LIST_SPACE n_get_list_space;
CONFIG_LIST config_list;
GET_CONFIG_LIST get_config_list;
SAVE_DISK save_disk;
LOAD_DISK load_disk;
GET_LIST_SPACE get_list_space;
N_SET_START_LIST_POS n_set_start_list_pos;
N_SET_START_LIST n_set_start_list;
N_SET_START_LIST_1 n_set_start_list_1;
N_SET_START_LIST_2 n_set_start_list_2;
N_SET_INPUT_POINTER n_set_input_pointer;
N_LOAD_LIST n_load_list;
N_LOAD_SUB n_load_sub;
N_LOAD_CHAR n_load_char;
N_LOAD_TEXT_TABLE n_load_text_table;
N_GET_LIST_POINTER n_get_list_pointer;
N_GET_INPUT_POINTER n_get_input_pointer;
SET_START_LIST_POS set_start_list_pos;
SET_START_LIST set_start_list;
SET_START_LIST_1 set_start_list_1;
SET_START_LIST_2 set_start_list_2;
SET_INPUT_POINTER set_input_pointer;
LOAD_LIST load_list;
LOAD_SUB load_sub;
LOAD_CHAR load_char;
LOAD_TEXT_TABLE load_text_table;
GET_LIST_POINTER get_list_pointer;
GET_INPUT_POINTER get_input_pointer;
N_EXECUTE_LIST_POS n_execute_list_pos;
N_EXECUTE_AT_POINTER n_execute_at_pointer;
N_EXECUTE_LIST n_execute_list;
N_EXECUTE_LIST_1 n_execute_list_1;
N_EXECUTE_LIST_2 n_execute_list_2;
N_GET_OUT_POINTER n_get_out_pointer;
EXECUTE_LIST_POS execute_list_pos;
EXECUTE_AT_POINTER execute_at_pointer;
EXECUTE_LIST execute_list;
EXECUTE_LIST_1 execute_list_1;
EXECUTE_LIST_2 execute_list_2;
GET_OUT_POINTER get_out_pointer;
N_AUTO_CHANGE_POS n_auto_change_pos;
N_START_LOOP n_start_loop;
N_QUIT_LOOP n_quit_loop;
N_PAUSE_LIST n_pause_list;
N_RESTART_LIST n_restart_list;
N_RELEASE_WAIT n_release_wait;
N_STOP_EXECUTION n_stop_execution;
N_AUTO_CHANGE n_auto_change;
N_STOP_LIST n_stop_list;
N_GET_WAIT_STATUS n_get_wait_status;
N_READ_STATUS n_read_status;
N_GET_STATUS n_get_status;
AUTO_CHANGE_POS auto_change_pos;
START_LOOP start_loop;
QUIT_LOOP quit_loop;
PAUSE_LIST pause_list;
RESTART_LIST restart_list;
RELEASE_WAIT release_wait;
STOP_EXECUTION stop_execution;
AUTO_CHANGE auto_change;
STOP_LIST stop_list;
GET_WAIT_STATUS get_wait_status;
READ_STATUS read_status;
GET_STATUS get_status;
N_SET_EXTSTARTPOS n_set_extstartpos;
N_SET_MAX_COUNTS n_set_max_counts;
N_SET_CONTROL_MODE n_set_control_mode;
N_SIMULATE_EXT_STOP n_simulate_ext_stop;
N_SIMULATE_EXT_START_CTRL n_simulate_ext_start_ctrl;
N_GET_COUNTS n_get_counts;
N_GET_STARTSTOP_INFO n_get_startstop_info;
SET_EXTSTARTPOS set_extstartpos;
SET_MAX_COUNTS set_max_counts;
SET_CONTROL_MODE set_control_mode;
SIMULATE_EXT_STOP simulate_ext_stop;
SIMULATE_EXT_START_CTRL simulate_ext_start_ctrl;
GET_COUNTS get_counts;
GET_STARTSTOP_INFO get_startstop_info;
N_COPY_DST_SRC n_copy_dst_src;
N_SET_CHAR_POINTER n_set_char_pointer;
N_SET_SUB_POINTER n_set_sub_pointer;
N_SET_TEXT_TABLE_POINTER n_set_text_table_pointer;
N_SET_CHAR_TABLE n_set_char_table;
N_GET_CHAR_POINTER n_get_char_pointer;
N_GET_SUB_POINTER n_get_sub_pointer;
N_GET_TEXT_TABLE_POINTER n_get_text_table_pointer;
COPY_DST_SRC copy_dst_src;
SET_CHAR_POINTER set_char_pointer;
SET_SUB_POINTER set_sub_pointer;
SET_TEXT_TABLE_POINTER set_text_table_pointer;
SET_CHAR_TABLE set_char_table;
GET_CHAR_POINTER get_char_pointer;
GET_SUB_POINTER get_sub_pointer;
GET_TEXT_TABLE_POINTER get_text_table_pointer;
N_TIME_UPDATE n_time_update;
N_SET_SERIAL_STEP n_set_serial_step;
N_SELECT_SERIAL_SET n_select_serial_set;
N_SET_SERIAL n_set_serial;
N_GET_SERIAL n_get_serial;
N_GET_LIST_SERIAL n_get_list_serial;
TIME_UPDATE time_update;
SET_SERIAL_STEP set_serial_step;
SELECT_SERIAL_SET select_serial_set;
SET_SERIAL set_serial;
GET_SERIAL get_serial;
GET_LIST_SERIAL get_list_serial;
N_WRITE_IO_PORT_MASK n_write_io_port_mask;
N_WRITE_8BIT_PORT n_write_8bit_port;
N_READ_IO_PORT n_read_io_port;
N_READ_IO_PORT_BUFFER n_read_io_port_buffer;
N_GET_IO_STATUS n_get_io_status;
N_READ_ANALOG_IN n_read_analog_in;
N_WRITE_DA_X n_write_da_x;
N_SET_LASER_OFF_DEFAULT n_set_laser_off_default;
N_SET_PORT_DEFAULT n_set_port_default;
N_WRITE_IO_PORT n_write_io_port;
N_WRITE_DA_1 n_write_da_1;
N_WRITE_DA_2 n_write_da_2;
WRITE_IO_PORT_MASK write_io_port_mask;
WRITE_8BIT_PORT write_8bit_port;
READ_IO_PORT read_io_port;
READ_IO_PORT_BUFFER read_io_port_buffer;
GET_IO_STATUS get_io_status;
READ_ANALOG_IN read_analog_in;
WRITE_DA_X write_da_x;
SET_LASER_OFF_DEFAULT set_laser_off_default;
SET_PORT_DEFAULT set_port_default;
WRITE_IO_PORT write_io_port;
WRITE_DA_1 write_da_1;
WRITE_DA_2 write_da_2;
N_DISABLE_LASER n_disable_laser;
N_ENABLE_LASER n_enable_laser;
N_LASER_SIGNAL_ON n_laser_signal_on;
N_LASER_SIGNAL_OFF n_laser_signal_off;
N_SET_STANDBY n_set_standby;
N_SET_LASER_PULSES_CTRL n_set_laser_pulses_ctrl;
N_SET_FIRSTPULSE_KILLER n_set_firstpulse_killer;
N_SET_QSWITCH_DELAY n_set_qswitch_delay;
N_SET_LASER_MODE n_set_laser_mode;
N_SET_LASER_CONTROL n_set_laser_control;
N_SET_LASER_PIN_OUT n_set_laser_pin_out;
N_GET_LASER_PIN_IN n_get_laser_pin_in;
N_SET_SOFTSTART_LEVEL n_set_softstart_level;
N_SET_SOFTSTART_MODE n_set_softstart_mode;
N_SET_AUTO_LASER_CONTROL n_set_auto_laser_control;
N_SET_AUTO_LASER_PARAMS n_set_auto_laser_params;
N_LOAD_AUTO_LASER_CONTROL n_load_auto_laser_control;
N_LOAD_POSITION_CONTROL n_load_position_control;
N_SET_DEFAULT_PIXEL n_set_default_pixel;
N_GET_STANDBY n_get_standby;
N_SET_PULSE_PICKING n_set_pulse_picking;
N_SET_PULSE_PICKING_LENGTH n_set_pulse_picking_length;
N_CONFIG_LASER_SIGNALS n_config_laser_signals;
DISABLE_LASER disable_laser;
ENABLE_LASER enable_laser;
LASER_SIGNAL_ON laser_signal_on;
LASER_SIGNAL_OFF laser_signal_off;
SET_STANDBY set_standby;
SET_LASER_PULSES_CTRL set_laser_pulses_ctrl;
SET_FIRSTPULSE_KILLER set_firstpulse_killer;
SET_QSWITCH_DELAY set_qswitch_delay;
SET_LASER_MODE set_laser_mode;
SET_LASER_CONTROL set_laser_control;
SET_LASER_PIN_OUT set_laser_pin_out;
GET_LASER_PIN_IN get_laser_pin_in;
SET_SOFTSTART_LEVEL set_softstart_level;
SET_SOFTSTART_MODE set_softstart_mode;
SET_AUTO_LASER_CONTROL set_auto_laser_control;
SET_AUTO_LASER_PARAMS set_auto_laser_params;
LOAD_AUTO_LASER_CONTROL load_auto_laser_control;
LOAD_POSITION_CONTROL load_position_control;
SET_DEFAULT_PIXEL set_default_pixel;
GET_STANDBY get_standby;
SET_PULSE_PICKING set_pulse_picking;
SET_PULSE_PICKING_LENGTH set_pulse_picking_length;
CONFIG_LASER_SIGNALS config_laser_signals;
N_SET_EXT_START_DELAY n_set_ext_start_delay;
N_SET_ROT_CENTER n_set_rot_center;
N_SIMULATE_ENCODER n_simulate_encoder;
N_GET_MARKING_INFO n_get_marking_info;
N_SET_ENCODER_SPEED_CTRL n_set_encoder_speed_ctrl;
N_SET_MCBSP_X n_set_mcbsp_x;
N_SET_MCBSP_Y n_set_mcbsp_y;
N_SET_MCBSP_ROT n_set_mcbsp_rot;
N_SET_MCBSP_MATRIX n_set_mcbsp_matrix;
N_SET_MCBSP_IN n_set_mcbsp_in;
N_SET_MULTI_MCBSP_IN n_set_multi_mcbsp_in;
N_SET_FLY_TRACKING_ERROR n_set_fly_tracking_error;
N_LOAD_FLY_2D_TABLE n_load_fly_2d_table;
N_INIT_FLY_2D n_init_fly_2d;
N_GET_FLY_2D_OFFSET n_get_fly_2d_offset;
N_GET_ENCODER n_get_encoder;
N_READ_ENCODER n_read_encoder;
N_GET_MCBSP n_get_mcbsp;
N_READ_MCBSP n_read_mcbsp;
N_READ_MULTI_MCBSP n_read_multi_mcbsp;
SET_EXT_START_DELAY set_ext_start_delay;
SET_ROT_CENTER set_rot_center;
SIMULATE_ENCODER simulate_encoder;
GET_MARKING_INFO get_marking_info;
SET_ENCODER_SPEED_CTRL set_encoder_speed_ctrl;
SET_MCBSP_X set_mcbsp_x;
SET_MCBSP_Y set_mcbsp_y;
SET_MCBSP_ROT set_mcbsp_rot;
SET_MCBSP_MATRIX set_mcbsp_matrix;
SET_MCBSP_IN set_mcbsp_in;
SET_MULTI_MCBSP_IN set_multi_mcbsp_in;
SET_FLY_TRACKING_ERROR set_fly_tracking_error;
LOAD_FLY_2D_TABLE load_fly_2d_table;
INIT_FLY_2D init_fly_2d;
GET_FLY_2D_OFFSET get_fly_2d_offset;
GET_ENCODER get_encoder;
READ_ENCODER read_encoder;
GET_MCBSP get_mcbsp;
READ_MCBSP read_mcbsp;
READ_MULTI_MCBSP read_multi_mcbsp;
N_GET_TIME n_get_time;
N_MEASUREMENT_STATUS n_measurement_status;
N_GET_WAVEFORM n_get_waveform;
N_BOUNCE_SUPP n_bounce_supp;
N_HOME_POSITION_XYZ n_home_position_xyz;
N_HOME_POSITION n_home_position;
N_RS232_CONFIG n_rs232_config;
N_RS232_WRITE_DATA n_rs232_write_data;
N_RS232_WRITE_TEXT n_rs232_write_text;
N_RS232_READ_DATA n_rs232_read_data;
N_SET_MCBSP_FREQ n_set_mcbsp_freq;
N_MCBSP_INIT n_mcbsp_init;
N_GET_OVERRUN n_get_overrun;
N_GET_MASTER_SLAVE n_get_master_slave;
N_GET_TRANSFORM n_get_transform;
N_STOP_TRIGGER n_stop_trigger;
N_MOVE_TO n_move_to;
N_SET_ENDURING_WOBBEL n_set_enduring_wobbel;
N_SET_FREE_VARIABLE n_set_free_variable;
N_GET_FREE_VARIABLE n_get_free_variable;
N_SET_MCBSP_OUT_PTR n_set_mcbsp_out_ptr;
GET_TIME get_time;
MEASUREMENT_STATUS measurement_status;
GET_WAVEFORM get_waveform;
BOUNCE_SUPP bounce_supp;
HOME_POSITION_XYZ home_position_xyz;
HOME_POSITION home_position;
RS232_CONFIG rs232_config;
RS232_WRITE_DATA rs232_write_data;
RS232_WRITE_TEXT rs232_write_text;
RS232_READ_DATA rs232_read_data;
SET_MCBSP_FREQ set_mcbsp_freq;
MCBSP_INIT mcbsp_init;
GET_OVERRUN get_overrun;
GET_MASTER_SLAVE get_master_slave;
GET_TRANSFORM get_transform;
STOP_TRIGGER stop_trigger;
MOVE_TO move_to;
SET_ENDURING_WOBBEL set_enduring_wobbel;
SET_FREE_VARIABLE set_free_variable;
GET_FREE_VARIABLE get_free_variable;
SET_MCBSP_OUT_PTR set_mcbsp_out_ptr;
N_SET_DEFOCUS n_set_defocus;
N_GOTO_XYZ n_goto_xyz;
N_GOTO_XY n_goto_xy;
N_GET_Z_DISTANCE n_get_z_distance;
SET_DEFOCUS set_defocus;
GOTO_XYZ goto_xyz;
GOTO_XY goto_xy;
GET_Z_DISTANCE get_z_distance;
N_SET_OFFSET_XYZ n_set_offset_xyz;
N_SET_OFFSET n_set_offset;
N_SET_MATRIX n_set_matrix;
N_SET_ANGLE n_set_angle;
N_SET_SCALE n_set_scale;
N_APPLY_MCBSP n_apply_mcbsp;
N_UPLOAD_TRANSFORM n_upload_transform;
SET_OFFSET_XYZ set_offset_xyz;
SET_OFFSET set_offset;
SET_MATRIX set_matrix;
SET_ANGLE set_angle;
SET_SCALE set_scale;
APPLY_MCBSP apply_mcbsp;
UPLOAD_TRANSFORM upload_transform;
TRANSFORM transform;
N_SET_DELAY_MODE n_set_delay_mode;
N_SET_JUMP_SPEED_CTRL n_set_jump_speed_ctrl;
N_SET_MARK_SPEED_CTRL n_set_mark_speed_ctrl;
N_SET_SKY_WRITING_PARA n_set_sky_writing_para;
N_SET_SKY_WRITING_LIMIT n_set_sky_writing_limit;
N_SET_SKY_WRITING_MODE n_set_sky_writing_mode;
N_LOAD_VARPOLYDELAY n_load_varpolydelay;
N_SET_HI n_set_hi;
N_GET_HI_POS n_get_hi_pos;
N_AUTO_CAL n_auto_cal;
N_GET_AUTO_CAL n_get_auto_cal;
N_SET_SKY_WRITING n_set_sky_writing;
N_GET_HI_DATA n_get_hi_data;
SET_DELAY_MODE set_delay_mode;
SET_JUMP_SPEED_CTRL set_jump_speed_ctrl;
SET_MARK_SPEED_CTRL set_mark_speed_ctrl;
SET_SKY_WRITING_PARA set_sky_writing_para;
SET_SKY_WRITING_LIMIT set_sky_writing_limit;
SET_SKY_WRITING_MODE set_sky_writing_mode;
LOAD_VARPOLYDELAY load_varpolydelay;
SET_HI set_hi;
GET_HI_POS get_hi_pos;
AUTO_CAL auto_cal;
GET_AUTO_CAL get_auto_cal;
SET_SKY_WRITING set_sky_writing;
GET_HI_DATA get_hi_data;
N_SEND_USER_DATA n_send_user_data;
N_READ_USER_DATA n_read_user_data;
N_CONTROL_COMMAND n_control_command;
N_GET_VALUE n_get_value;
N_GET_VALUES n_get_values;
N_GET_HEAD_STATUS n_get_head_status;
N_SET_JUMP_MODE n_set_jump_mode;
N_LOAD_JUMP_TABLE_OFFSET n_load_jump_table_offset;
N_GET_JUMP_TABLE n_get_jump_table;
N_SET_JUMP_TABLE n_set_jump_table;
N_LOAD_JUMP_TABLE n_load_jump_table;
SEND_USER_DATA send_user_data;
READ_USER_DATA read_user_data;
CONTROL_COMMAND control_command;
GET_VALUE get_value;
GET_VALUES get_values;
GET_HEAD_STATUS get_head_status;
SET_JUMP_MODE set_jump_mode;
LOAD_JUMP_TABLE_OFFSET load_jump_table_offset;
GET_JUMP_TABLE get_jump_table;
SET_JUMP_TABLE set_jump_table;
LOAD_JUMP_TABLE load_jump_table;
N_STEPPER_INIT n_stepper_init;
N_STEPPER_ENABLE n_stepper_enable;
N_STEPPER_CONTROL n_stepper_control;
N_STEPPER_ABS_NO n_stepper_abs_no;
N_STEPPER_REL_NO n_stepper_rel_no;
N_STEPPER_ABS n_stepper_abs;
N_STEPPER_REL n_stepper_rel;
N_GET_STEPPER_STATUS n_get_stepper_status;
STEPPER_INIT stepper_init;
STEPPER_ENABLE stepper_enable;
STEPPER_CONTROL stepper_control;
STEPPER_ABS_NO stepper_abs_no;
STEPPER_REL_NO stepper_rel_no;
STEPPER_ABS stepper_abs;
STEPPER_REL stepper_rel;
GET_STEPPER_STATUS get_stepper_status;
N_SELECT_COR_TABLE_LIST n_select_cor_table_list;
SELECT_COR_TABLE_LIST select_cor_table_list;
N_LIST_NOP n_list_nop;
N_LIST_CONTINUE n_list_continue;
N_LONG_DELAY n_long_delay;
N_SET_END_OF_LIST n_set_end_of_list;
N_SET_WAIT n_set_wait;
N_LIST_JUMP_POS n_list_jump_pos;
N_LIST_JUMP_REL n_list_jump_rel;
N_LIST_REPEAT n_list_repeat;
N_LIST_UNTIL n_list_until;
N_RANGE_CHECKING n_range_checking;
N_SET_LIST_JUMP n_set_list_jump;
LIST_NOP list_nop;
LIST_CONTINUE list_continue;
LONG_DELAY long_delay;
SET_END_OF_LIST set_end_of_list;
SET_WAIT set_wait;
LIST_JUMP_POS list_jump_pos;
LIST_JUMP_REL list_jump_rel;
LIST_REPEAT list_repeat;
LIST_UNTIL list_until;
RANGE_CHECKING range_checking;
SET_LIST_JUMP set_list_jump;
N_SET_EXTSTARTPOS_LIST n_set_extstartpos_list;
N_SET_CONTROL_MODE_LIST n_set_control_mode_list;
N_SIMULATE_EXT_START n_simulate_ext_start;
SET_EXTSTARTPOS_LIST set_extstartpos_list;
SET_CONTROL_MODE_LIST set_control_mode_list;
SIMULATE_EXT_START simulate_ext_start;
N_LIST_RETURN n_list_return;
N_LIST_CALL n_list_call;
N_LIST_CALL_ABS n_list_call_abs;
N_SUB_CALL n_sub_call;
N_SUB_CALL_ABS n_sub_call_abs;
LIST_RETURN list_return;
LIST_CALL list_call;
LIST_CALL_ABS list_call_abs;
SUB_CALL sub_call;
SUB_CALL_ABS sub_call_abs;
N_LIST_CALL_COND n_list_call_cond;
N_LIST_CALL_ABS_COND n_list_call_abs_cond;
N_SUB_CALL_COND n_sub_call_cond;
N_SUB_CALL_ABS_COND n_sub_call_abs_cond;
N_LIST_JUMP_POS_COND n_list_jump_pos_cond;
N_LIST_JUMP_REL_COND n_list_jump_rel_cond;
N_IF_COND n_if_cond;
N_IF_NOT_COND n_if_not_cond;
N_IF_PIN_COND n_if_pin_cond;
N_IF_NOT_PIN_COND n_if_not_pin_cond;
N_SWITCH_IOPORT n_switch_ioport;
N_LIST_JUMP_COND n_list_jump_cond;
LIST_CALL_COND list_call_cond;
LIST_CALL_ABS_COND list_call_abs_cond;
SUB_CALL_COND sub_call_cond;
SUB_CALL_ABS_COND sub_call_abs_cond;
LIST_JUMP_POS_COND list_jump_pos_cond;
LIST_JUMP_REL_COND list_jump_rel_cond;
IF_COND if_cond;
IF_NOT_COND if_not_cond;
IF_PIN_COND if_pin_cond;
IF_NOT_PIN_COND if_not_pin_cond;
SWITCH_IOPORT switch_ioport;
LIST_JUMP_COND list_jump_cond;
N_SELECT_CHAR_SET n_select_char_set;
N_MARK_TEXT n_mark_text;
N_MARK_TEXT_ABS n_mark_text_abs;
N_MARK_CHAR n_mark_char;
N_MARK_CHAR_ABS n_mark_char_abs;
SELECT_CHAR_SET select_char_set;
MARK_TEXT mark_text;
MARK_TEXT_ABS mark_text_abs;
MARK_CHAR mark_char;
MARK_CHAR_ABS mark_char_abs;
N_MARK_SERIAL n_mark_serial;
N_MARK_SERIAL_ABS n_mark_serial_abs;
N_MARK_DATE n_mark_date;
N_MARK_DATE_ABS n_mark_date_abs;
N_MARK_TIME n_mark_time;
N_MARK_TIME_ABS n_mark_time_abs;
N_SELECT_SERIAL_SET_LIST n_select_serial_set_list;
N_SET_SERIAL_STEP_LIST n_set_serial_step_list;
N_TIME_FIX_F_OFF n_time_fix_f_off;
N_TIME_FIX_F n_time_fix_f;
N_TIME_FIX n_time_fix;
MARK_SERIAL mark_serial;
MARK_SERIAL_ABS mark_serial_abs;
MARK_DATE mark_date;
MARK_DATE_ABS mark_date_abs;
MARK_TIME mark_time;
MARK_TIME_ABS mark_time_abs;
TIME_FIX_F_OFF time_fix_f_off;
SELECT_SERIAL_SET_LIST select_serial_set_list;
SET_SERIAL_STEP_LIST set_serial_step_list;
TIME_FIX_F time_fix_f;
TIME_FIX time_fix;
N_CLEAR_IO_COND_LIST n_clear_io_cond_list;
N_SET_IO_COND_LIST n_set_io_cond_list;
N_WRITE_IO_PORT_MASK_LIST n_write_io_port_mask_list;
N_WRITE_8BIT_PORT_LIST n_write_8bit_port_list;
N_READ_IO_PORT_LIST n_read_io_port_list;
N_WRITE_DA_X_LIST n_write_da_x_list;
N_WRITE_IO_PORT_LIST n_write_io_port_list;
N_WRITE_DA_1_LIST n_write_da_1_list;
N_WRITE_DA_2_LIST n_write_da_2_list;
CLEAR_IO_COND_LIST clear_io_cond_list;
SET_IO_COND_LIST set_io_cond_list;
WRITE_IO_PORT_MASK_LIST write_io_port_mask_list;
WRITE_8BIT_PORT_LIST write_8bit_port_list;
READ_IO_PORT_LIST read_io_port_list;
WRITE_DA_X_LIST write_da_x_list;
WRITE_IO_PORT_LIST write_io_port_list;
WRITE_DA_1_LIST write_da_1_list;
WRITE_DA_2_LIST write_da_2_list;
N_LASER_SIGNAL_ON_LIST n_laser_signal_on_list;
N_LASER_SIGNAL_OFF_LIST n_laser_signal_off_list;
N_PARA_LASER_ON_PULSES_LIST n_para_laser_on_pulses_list;
N_LASER_ON_PULSES_LIST n_laser_on_pulses_list;
N_LASER_ON_LIST n_laser_on_list;
N_SET_LASER_DELAYS n_set_laser_delays;
N_SET_STANDBY_LIST n_set_standby_list;
N_SET_LASER_PULSES n_set_laser_pulses;
N_SET_FIRSTPULSE_KILLER_LIST n_set_firstpulse_killer_list;
N_SET_QSWITCH_DELAY_LIST n_set_qswitch_delay_list;
N_SET_LASER_PIN_OUT_LIST n_set_laser_pin_out_list;
N_SET_VECTOR_CONTROL n_set_vector_control;
N_SET_DEFAULT_PIXEL_LIST n_set_default_pixel_list;
N_SET_AUTO_LASER_PARAMS_LIST n_set_auto_laser_params_list;
N_SET_PULSE_PICKING_LIST n_set_pulse_picking_list;
N_SET_SOFTSTART_LEVEL_LIST n_set_softstart_level_list;
N_SET_SOFTSTART_MODE_LIST n_set_softstart_mode_list;
N_CONFIG_LASER_SIGNALS_LIST n_config_laser_signals_list;
N_SET_LASER_TIMING n_set_laser_timing;
LASER_SIGNAL_ON_LIST laser_signal_on_list;
LASER_SIGNAL_OFF_LIST laser_signal_off_list;
PARA_LASER_ON_PULSES_LIST para_laser_on_pulses_list;
LASER_ON_PULSES_LIST laser_on_pulses_list;
LASER_ON_LIST laser_on_list;
SET_LASER_DELAYS set_laser_delays;
SET_STANDBY_LIST set_standby_list;
SET_LASER_PULSES set_laser_pulses;
SET_FIRSTPULSE_KILLER_LIST set_firstpulse_killer_list;
SET_QSWITCH_DELAY_LIST set_qswitch_delay_list;
SET_LASER_PIN_OUT_LIST set_laser_pin_out_list;
SET_VECTOR_CONTROL set_vector_control;
SET_DEFAULT_PIXEL_LIST set_default_pixel_list;
SET_AUTO_LASER_PARAMS_LIST set_auto_laser_params_list;
SET_PULSE_PICKING_LIST set_pulse_picking_list;
SET_SOFTSTART_LEVEL_LIST set_softstart_level_list;
SET_SOFTSTART_MODE_LIST set_softstart_mode_list;
CONFIG_LASER_SIGNALS_LIST config_laser_signals_list;
SET_LASER_TIMING set_laser_timing;
N_FLY_RETURN_Z n_fly_return_z;
N_FLY_RETURN n_fly_return;
N_SET_ROT_CENTER_LIST n_set_rot_center_list;
N_SET_EXT_START_DELAY_LIST n_set_ext_start_delay_list;
N_SET_FLY_X n_set_fly_x;
N_SET_FLY_Y n_set_fly_y;
N_SET_FLY_Z n_set_fly_z;
N_SET_FLY_ROT n_set_fly_rot;
N_SET_FLY_2D n_set_fly_2d;
N_SET_FLY_X_POS n_set_fly_x_pos;
N_SET_FLY_Y_POS n_set_fly_y_pos;
N_SET_FLY_ROT_POS n_set_fly_rot_pos;
N_SET_FLY_LIMITS n_set_fly_limits;
N_SET_FLY_LIMITS_Z n_set_fly_limits_z;
N_IF_FLY_X_OVERFLOW n_if_fly_x_overflow;
N_IF_FLY_Y_OVERFLOW n_if_fly_y_overflow;
N_IF_FLY_Z_OVERFLOW n_if_fly_z_overflow;
N_IF_NOT_FLY_X_OVERFLOW n_if_not_fly_x_overflow;
N_IF_NOT_FLY_Y_OVERFLOW n_if_not_fly_y_overflow;
N_IF_NOT_FLY_Z_OVERFLOW n_if_not_fly_z_overflow;
N_CLEAR_FLY_OVERFLOW n_clear_fly_overflow;
N_SET_MCBSP_X_LIST n_set_mcbsp_x_list;
N_SET_MCBSP_Y_LIST n_set_mcbsp_y_list;
N_SET_MCBSP_ROT_LIST n_set_mcbsp_rot_list;
N_SET_MCBSP_MATRIX_LIST n_set_mcbsp_matrix_list;
N_SET_MCBSP_IN_LIST n_set_mcbsp_in_list;
N_SET_MULTI_MCBSP_IN_LIST n_set_multi_mcbsp_in_list;
N_WAIT_FOR_ENCODER_MODE n_wait_for_encoder_mode;
N_WAIT_FOR_MCBSP n_wait_for_mcbsp;
N_SET_ENCODER_SPEED n_set_encoder_speed;
N_GET_MCBSP_LIST n_get_mcbsp_list;
N_STORE_ENCODER n_store_encoder;
N_WAIT_FOR_ENCODER_IN_RANGE n_wait_for_encoder_in_range;
N_ACTIVATE_FLY_XY n_activate_fly_xy;
N_ACTIVATE_FLY_2D n_activate_fly_2d;
N_IF_NOT_ACTIVATED n_if_not_activated;
N_PARK_POSITION n_park_position;
N_PARK_RETURN n_park_return;
N_WAIT_FOR_ENCODER n_wait_for_encoder;
FLY_RETURN_Z fly_return_z;
FLY_RETURN fly_return;
SET_ROT_CENTER_LIST set_rot_center_list;
SET_EXT_START_DELAY_LIST set_ext_start_delay_list;
SET_FLY_X set_fly_x;
SET_FLY_Y set_fly_y;
SET_FLY_Z set_fly_z;
SET_FLY_ROT set_fly_rot;
SET_FLY_2D set_fly_2d;
SET_FLY_X_POS set_fly_x_pos;
SET_FLY_Y_POS set_fly_y_pos;
SET_FLY_ROT_POS set_fly_rot_pos;
SET_FLY_LIMITS set_fly_limits;
SET_FLY_LIMITS_Z set_fly_limits_z;
IF_FLY_X_OVERFLOW if_fly_x_overflow;
IF_FLY_Y_OVERFLOW if_fly_y_overflow;
IF_FLY_Z_OVERFLOW if_fly_z_overflow;
IF_NOT_FLY_X_OVERFLOW if_not_fly_x_overflow;
IF_NOT_FLY_Y_OVERFLOW if_not_fly_y_overflow;
IF_NOT_FLY_Z_OVERFLOW if_not_fly_z_overflow;
CLEAR_FLY_OVERFLOW clear_fly_overflow;
SET_MCBSP_X_LIST set_mcbsp_x_list;
SET_MCBSP_Y_LIST set_mcbsp_y_list;
SET_MCBSP_ROT_LIST set_mcbsp_rot_list;
SET_MCBSP_MATRIX_LIST set_mcbsp_matrix_list;
SET_MCBSP_IN_LIST set_mcbsp_in_list;
SET_MULTI_MCBSP_IN_LIST set_multi_mcbsp_in_list;
WAIT_FOR_ENCODER_MODE wait_for_encoder_mode;
WAIT_FOR_MCBSP wait_for_mcbsp;
SET_ENCODER_SPEED set_encoder_speed;
GET_MCBSP_LIST get_mcbsp_list;
STORE_ENCODER store_encoder;
WAIT_FOR_ENCODER_IN_RANGE wait_for_encoder_in_range;
ACTIVATE_FLY_XY activate_fly_xy;
ACTIVATE_FLY_2D activate_fly_2d;
IF_NOT_ACTIVATED if_not_activated;
PARK_POSITION park_position;
PARK_RETURN park_return;
WAIT_FOR_ENCODER wait_for_encoder;
N_SAVE_AND_RESTART_TIMER n_save_and_restart_timer;
N_SET_WOBBEL n_set_wobbel;
N_SET_WOBBEL_MODE n_set_wobbel_mode;
N_SET_WOBBEL_DIRECTION n_set_wobbel_direction;
N_SET_WOBBEL_CONTROL n_set_wobbel_control;
N_SET_WOBBEL_VECTOR n_set_wobbel_vector;
N_SET_WOBBEL_OFFSET n_set_wobbel_offset;
N_SET_TRIGGER n_set_trigger;
N_SET_TRIGGER4 n_set_trigger4;
N_SET_PIXEL_LINE_3D n_set_pixel_line_3d;
N_SET_PIXEL_LINE n_set_pixel_line;
N_SET_N_PIXEL n_set_n_pixel;
N_SET_PIXEL n_set_pixel;
N_RS232_WRITE_TEXT_LIST n_rs232_write_text_list;
N_SET_MCBSP_OUT n_set_mcbsp_out;
N_CAMMING n_camming;
N_MICRO_VECTOR_ABS_3D n_micro_vector_abs_3d;
N_MICRO_VECTOR_REL_3D n_micro_vector_rel_3d;
N_MICRO_VECTOR_ABS n_micro_vector_abs;
N_MICRO_VECTOR_REL n_micro_vector_rel;
N_SET_FREE_VARIABLE_LIST n_set_free_variable_list;
N_CONTROL_COMMAND_LIST n_control_command_list;
SAVE_AND_RESTART_TIMER save_and_restart_timer;
SET_WOBBEL set_wobbel;
SET_WOBBEL_MODE set_wobbel_mode;
SET_WOBBEL_DIRECTION set_wobbel_direction;
SET_WOBBEL_CONTROL set_wobbel_control;
SET_WOBBEL_VECTOR set_wobbel_vector;
SET_WOBBEL_OFFSET set_wobbel_offset;
SET_TRIGGER set_trigger;
SET_TRIGGER4 set_trigger4;
SET_PIXEL_LINE_3D set_pixel_line_3d;
SET_PIXEL_LINE set_pixel_line;
SET_N_PIXEL set_n_pixel;
SET_PIXEL set_pixel;
RS232_WRITE_TEXT_LIST rs232_write_text_list;
SET_MCBSP_OUT set_mcbsp_out;
CAMMING camming;
MICRO_VECTOR_ABS_3D micro_vector_abs_3d;
MICRO_VECTOR_REL_3D micro_vector_rel_3d;
MICRO_VECTOR_ABS micro_vector_abs;
MICRO_VECTOR_REL micro_vector_rel;
SET_FREE_VARIABLE_LIST set_free_variable_list;
CONTROL_COMMAND_LIST control_command_list;
N_TIMED_MARK_ABS_3D n_timed_mark_abs_3d;
N_TIMED_MARK_REL_3D n_timed_mark_rel_3d;
N_TIMED_MARK_ABS n_timed_mark_abs;
N_TIMED_MARK_REL n_timed_mark_rel;
TIMED_MARK_ABS_3D timed_mark_abs_3d;
TIMED_MARK_REL_3D timed_mark_rel_3d;
TIMED_MARK_ABS timed_mark_abs;
TIMED_MARK_REL timed_mark_rel;
N_MARK_ABS_3D n_mark_abs_3d;
N_MARK_REL_3D n_mark_rel_3d;
N_MARK_ABS n_mark_abs;
N_MARK_REL n_mark_rel;
MARK_ABS_3D mark_abs_3d;
MARK_REL_3D mark_rel_3d;
MARK_ABS mark_abs;
MARK_REL mark_rel;
N_TIMED_JUMP_ABS_3D n_timed_jump_abs_3d;
N_TIMED_JUMP_REL_3D n_timed_jump_rel_3d;
N_TIMED_JUMP_ABS n_timed_jump_abs;
N_TIMED_JUMP_REL n_timed_jump_rel;
TIMED_JUMP_ABS_3D timed_jump_abs_3d;
TIMED_JUMP_REL_3D timed_jump_rel_3d;
TIMED_JUMP_ABS timed_jump_abs;
TIMED_JUMP_REL timed_jump_rel;
N_JUMP_ABS_3D n_jump_abs_3d;
N_JUMP_REL_3D n_jump_rel_3d;
N_JUMP_ABS n_jump_abs;
N_JUMP_REL n_jump_rel;
JUMP_ABS_3D jump_abs_3d;
JUMP_REL_3D jump_rel_3d;
JUMP_ABS jump_abs;
JUMP_REL jump_rel;
N_PARA_MARK_ABS_3D n_para_mark_abs_3d;
N_PARA_MARK_REL_3D n_para_mark_rel_3d;
N_PARA_MARK_ABS n_para_mark_abs;
N_PARA_MARK_REL n_para_mark_rel;
PARA_MARK_ABS_3D para_mark_abs_3d;
PARA_MARK_REL_3D para_mark_rel_3d;
PARA_MARK_ABS para_mark_abs;
PARA_MARK_REL para_mark_rel;
N_PARA_JUMP_ABS_3D n_para_jump_abs_3d;
N_PARA_JUMP_REL_3D n_para_jump_rel_3d;
N_PARA_JUMP_ABS n_para_jump_abs;
N_PARA_JUMP_REL n_para_jump_rel;
PARA_JUMP_ABS_3D para_jump_abs_3d;
PARA_JUMP_REL_3D para_jump_rel_3d;
PARA_JUMP_ABS para_jump_abs;
PARA_JUMP_REL para_jump_rel;
N_TIMED_PARA_MARK_ABS_3D n_timed_para_mark_abs_3d;
N_TIMED_PARA_MARK_REL_3D n_timed_para_mark_rel_3d;
N_TIMED_PARA_JUMP_ABS_3D n_timed_para_jump_abs_3d;
N_TIMED_PARA_JUMP_REL_3D n_timed_para_jump_rel_3d;
N_TIMED_PARA_MARK_ABS n_timed_para_mark_abs;
N_TIMED_PARA_MARK_REL n_timed_para_mark_rel;
N_TIMED_PARA_JUMP_ABS n_timed_para_jump_abs;
N_TIMED_PARA_JUMP_REL n_timed_para_jump_rel;
TIMED_PARA_MARK_ABS_3D timed_para_mark_abs_3d;
TIMED_PARA_MARK_REL_3D timed_para_mark_rel_3d;
TIMED_PARA_JUMP_ABS_3D timed_para_jump_abs_3d;
TIMED_PARA_JUMP_REL_3D timed_para_jump_rel_3d;
TIMED_PARA_MARK_ABS timed_para_mark_abs;
TIMED_PARA_MARK_REL timed_para_mark_rel;
TIMED_PARA_JUMP_ABS timed_para_jump_abs;
TIMED_PARA_JUMP_REL timed_para_jump_rel;
N_SET_DEFOCUS_LIST n_set_defocus_list;
SET_DEFOCUS_LIST set_defocus_list;
N_TIMED_ARC_ABS n_timed_arc_abs;
N_TIMED_ARC_REL n_timed_arc_rel;
TIMED_ARC_ABS timed_arc_abs;
TIMED_ARC_REL timed_arc_rel;
N_ARC_ABS_3D n_arc_abs_3d;
N_ARC_REL_3D n_arc_rel_3d;
N_ARC_ABS n_arc_abs;
N_ARC_REL n_arc_rel;
N_SET_ELLIPSE n_set_ellipse;
N_MARK_ELLIPSE_ABS n_mark_ellipse_abs;
N_MARK_ELLIPSE_REL n_mark_ellipse_rel;
ARC_ABS_3D arc_abs_3d;
ARC_REL_3D arc_rel_3d;
ARC_ABS arc_abs;
ARC_REL arc_rel;
SET_ELLIPSE set_ellipse;
MARK_ELLIPSE_ABS mark_ellipse_abs;
MARK_ELLIPSE_REL mark_ellipse_rel;
N_SET_OFFSET_XYZ_LIST n_set_offset_xyz_list;
N_SET_OFFSET_LIST n_set_offset_list;
N_SET_MATRIX_LIST n_set_matrix_list;
N_SET_ANGLE_LIST n_set_angle_list;
N_SET_SCALE_LIST n_set_scale_list;
N_APPLY_MCBSP_LIST n_apply_mcbsp_list;
SET_OFFSET_XYZ_LIST set_offset_xyz_list;
SET_OFFSET_LIST set_offset_list;
SET_MATRIX_LIST set_matrix_list;
SET_ANGLE_LIST set_angle_list;
SET_SCALE_LIST set_scale_list;
APPLY_MCBSP_LIST apply_mcbsp_list;
N_SET_MARK_SPEED n_set_mark_speed;
N_SET_JUMP_SPEED n_set_jump_speed;
N_SET_SKY_WRITING_PARA_LIST n_set_sky_writing_para_list;
N_SET_SKY_WRITING_LIST n_set_sky_writing_list;
N_SET_SKY_WRITING_LIMIT_LIST n_set_sky_writing_limit_list;
N_SET_SKY_WRITING_MODE_LIST n_set_sky_writing_mode_list;
N_SET_SCANNER_DELAYS n_set_scanner_delays;
N_SET_JUMP_MODE_LIST n_set_jump_mode_list;
N_ENDURING_WOBBEL n_enduring_wobbel;
N_SET_DELAY_MODE_LIST n_set_delay_mode_list;
SET_MARK_SPEED set_mark_speed;
SET_JUMP_SPEED set_jump_speed;
SET_SKY_WRITING_PARA_LIST set_sky_writing_para_list;
SET_SKY_WRITING_LIST set_sky_writing_list;
SET_SKY_WRITING_LIMIT_LIST set_sky_writing_limit_list;
SET_SKY_WRITING_MODE_LIST set_sky_writing_mode_list;
SET_SCANNER_DELAYS set_scanner_delays;
SET_JUMP_MODE_LIST set_jump_mode_list;
ENDURING_WOBBEL enduring_wobbel;
SET_DELAY_MODE_LIST set_delay_mode_list;
N_STEPPER_ENABLE_LIST n_stepper_enable_list;
N_STEPPER_CONTROL_LIST n_stepper_control_list;
N_STEPPER_ABS_NO_LIST n_stepper_abs_no_list;
N_STEPPER_REL_NO_LIST n_stepper_rel_no_list;
N_STEPPER_ABS_LIST n_stepper_abs_list;
N_STEPPER_REL_LIST n_stepper_rel_list;
N_STEPPER_WAIT n_stepper_wait;
STEPPER_ENABLE_LIST stepper_enable_list;
STEPPER_CONTROL_LIST stepper_control_list;
STEPPER_ABS_NO_LIST stepper_abs_no_list;
STEPPER_REL_NO_LIST stepper_rel_no_list;
STEPPER_ABS_LIST stepper_abs_list;
STEPPER_REL_LIST stepper_rel_list;
STEPPER_WAIT stepper_wait;

}//namespace

//  RTC5open
//
//  This function explicitly or dynamically links to the RTC5DLL.DLL.
//  Call it before using any RTC5 function.
//
//      Return      Meaning
//
//       0          Success. Using of the RTC5 functions is possible.
//      -1          Error: file RTC5DLL.DLL not found. The RTC5 functions
//                  cannot be used.
//      -2          Error: file RTC5DLL.DLL is already loaded.
long RTC5open(void) {
     if(gLibRTC5)
         return(-2);

#if defined(_WIN32) || defined(WIN32)
	 gLibRTC5 = LoadLibrary(_T("RTC5DLL.DLL"));
#endif

#if defined(_WIN64) || defined(WIN64)
	 gLibRTC5 = LoadLibrary(_T("RTC5DLLx64.DLL"));
#endif

	 if (!gLibRTC5)
		 return(-1);

	using namespace rtc5;

	// Get the addresses of the DLL-Functions
	init_rtc5_dll = (INIT_RTC5_DLL)GetProcAddress(gLibRTC5, "init_rtc5_dll");
	free_rtc5_dll = (FREE_RTC5_DLL)GetProcAddress(gLibRTC5, "free_rtc5_dll");
	set_rtc4_mode = (SET_RTC4_MODE)GetProcAddress(gLibRTC5, "set_rtc4_mode");
	set_rtc5_mode = (SET_RTC5_MODE)GetProcAddress(gLibRTC5, "set_rtc5_mode");
	get_rtc_mode = (GET_RTC_MODE)GetProcAddress(gLibRTC5, "get_rtc_mode");
	n_get_error = (N_GET_ERROR)GetProcAddress(gLibRTC5, "n_get_error");
	n_get_last_error = (N_GET_LAST_ERROR)GetProcAddress(gLibRTC5, "n_get_last_error");
	n_reset_error = (N_RESET_ERROR)GetProcAddress(gLibRTC5, "n_reset_error");
	n_set_verify = (N_SET_VERIFY)GetProcAddress(gLibRTC5, "n_set_verify");
	get_error = (GET_ERROR)GetProcAddress(gLibRTC5, "get_error");
	get_last_error = (GET_LAST_ERROR)GetProcAddress(gLibRTC5, "get_last_error");
	reset_error = (RESET_ERROR)GetProcAddress(gLibRTC5, "reset_error");
	set_verify = (SET_VERIFY)GetProcAddress(gLibRTC5, "set_verify");
	verify_checksum = (VERIFY_CHECKSUM)GetProcAddress(gLibRTC5, "verify_checksum");
	rtc5_count_cards = (RTC5_COUNT_CARDS)GetProcAddress(gLibRTC5, "rtc5_count_cards");
	acquire_rtc = (ACQUIRE_RTC)GetProcAddress(gLibRTC5, "acquire_rtc");
	release_rtc = (RELEASE_RTC)GetProcAddress(gLibRTC5, "release_rtc");
	select_rtc = (SELECT_RTC)GetProcAddress(gLibRTC5, "select_rtc");
	get_dll_version = (GET_DLL_VERSION)GetProcAddress(gLibRTC5, "get_dll_version");
	n_get_serial_number = (N_GET_SERIAL_NUMBER)GetProcAddress(gLibRTC5, "n_get_serial_number");
	n_get_hex_version = (N_GET_HEX_VERSION)GetProcAddress(gLibRTC5, "n_get_hex_version");
	n_get_rtc_version = (N_GET_RTC_VERSION)GetProcAddress(gLibRTC5, "n_get_rtc_version");
	get_serial_number = (GET_SERIAL_NUMBER)GetProcAddress(gLibRTC5, "get_serial_number");
	get_hex_version = (GET_HEX_VERSION)GetProcAddress(gLibRTC5, "get_hex_version");
	get_rtc_version = (GET_RTC_VERSION)GetProcAddress(gLibRTC5, "get_rtc_version");
	n_load_program_file = (N_LOAD_PROGRAM_FILE)GetProcAddress(gLibRTC5, "n_load_program_file");
	n_sync_slaves = (N_SYNC_SLAVES)GetProcAddress(gLibRTC5, "n_sync_slaves");
	n_get_sync_status = (N_GET_SYNC_STATUS)GetProcAddress(gLibRTC5, "n_get_sync_status");
	n_load_correction_file = (N_LOAD_CORRECTION_FILE)GetProcAddress(gLibRTC5, "n_load_correction_file");
	n_load_z_table = (N_LOAD_Z_TABLE)GetProcAddress(gLibRTC5, "n_load_z_table");
	n_select_cor_table = (N_SELECT_COR_TABLE)GetProcAddress(gLibRTC5, "n_select_cor_table");
	n_set_dsp_mode = (N_SET_DSP_MODE)GetProcAddress(gLibRTC5, "n_set_dsp_mode");
	n_load_stretch_table = (N_LOAD_STRETCH_TABLE)GetProcAddress(gLibRTC5, "n_load_stretch_table");
	n_get_head_para = (N_GET_HEAD_PARA)GetProcAddress(gLibRTC5, "n_get_head_para");
	n_get_table_para = (N_GET_TABLE_PARA)GetProcAddress(gLibRTC5, "n_get_table_para");
	load_program_file = (LOAD_PROGRAM_FILE)GetProcAddress(gLibRTC5, "load_program_file");
	sync_slaves = (SYNC_SLAVES)GetProcAddress(gLibRTC5, "sync_slaves");
	get_sync_status = (GET_SYNC_STATUS)GetProcAddress(gLibRTC5, "get_sync_status");
	load_correction_file = (LOAD_CORRECTION_FILE)GetProcAddress(gLibRTC5, "load_correction_file");
	load_z_table = (LOAD_Z_TABLE)GetProcAddress(gLibRTC5, "load_z_table");
	select_cor_table = (SELECT_COR_TABLE)GetProcAddress(gLibRTC5, "select_cor_table");
	set_dsp_mode = (SET_DSP_MODE)GetProcAddress(gLibRTC5, "set_dsp_mode");
	load_stretch_table = (LOAD_STRETCH_TABLE)GetProcAddress(gLibRTC5, "load_stretch_table");
	get_head_para = (GET_HEAD_PARA)GetProcAddress(gLibRTC5, "get_head_para");
	get_table_para = (GET_TABLE_PARA)GetProcAddress(gLibRTC5, "get_table_para");
	n_config_list = (N_CONFIG_LIST)GetProcAddress(gLibRTC5, "n_config_list");
	n_get_config_list = (N_GET_CONFIG_LIST)GetProcAddress(gLibRTC5, "n_get_config_list");
	n_save_disk = (N_SAVE_DISK)GetProcAddress(gLibRTC5, "n_save_disk");
	n_load_disk = (N_LOAD_DISK)GetProcAddress(gLibRTC5, "n_load_disk");
	n_get_list_space = (N_GET_LIST_SPACE)GetProcAddress(gLibRTC5, "n_get_list_space");
	config_list = (CONFIG_LIST)GetProcAddress(gLibRTC5, "config_list");
	get_config_list = (GET_CONFIG_LIST)GetProcAddress(gLibRTC5, "get_config_list");
	save_disk = (SAVE_DISK)GetProcAddress(gLibRTC5, "save_disk");
	load_disk = (LOAD_DISK)GetProcAddress(gLibRTC5, "load_disk");
	get_list_space = (GET_LIST_SPACE)GetProcAddress(gLibRTC5, "get_list_space");
	n_set_start_list_pos = (N_SET_START_LIST_POS)GetProcAddress(gLibRTC5, "n_set_start_list_pos");
	n_set_start_list = (N_SET_START_LIST)GetProcAddress(gLibRTC5, "n_set_start_list");
	n_set_start_list_1 = (N_SET_START_LIST_1)GetProcAddress(gLibRTC5, "n_set_start_list_1");
	n_set_start_list_2 = (N_SET_START_LIST_2)GetProcAddress(gLibRTC5, "n_set_start_list_2");
	n_set_input_pointer = (N_SET_INPUT_POINTER)GetProcAddress(gLibRTC5, "n_set_input_pointer");
	n_load_list = (N_LOAD_LIST)GetProcAddress(gLibRTC5, "n_load_list");
	n_load_sub = (N_LOAD_SUB)GetProcAddress(gLibRTC5, "n_load_sub");
	n_load_char = (N_LOAD_CHAR)GetProcAddress(gLibRTC5, "n_load_char");
	n_load_text_table = (N_LOAD_TEXT_TABLE)GetProcAddress(gLibRTC5, "n_load_text_table");
	n_get_list_pointer = (N_GET_LIST_POINTER)GetProcAddress(gLibRTC5, "n_get_list_pointer");
	n_get_input_pointer = (N_GET_INPUT_POINTER)GetProcAddress(gLibRTC5, "n_get_input_pointer");
	set_start_list_pos = (SET_START_LIST_POS)GetProcAddress(gLibRTC5, "set_start_list_pos");
	set_start_list = (SET_START_LIST)GetProcAddress(gLibRTC5, "set_start_list");
	set_start_list_1 = (SET_START_LIST_1)GetProcAddress(gLibRTC5, "set_start_list_1");
	set_start_list_2 = (SET_START_LIST_2)GetProcAddress(gLibRTC5, "set_start_list_2");
	set_input_pointer = (SET_INPUT_POINTER)GetProcAddress(gLibRTC5, "set_input_pointer");
	load_list = (LOAD_LIST)GetProcAddress(gLibRTC5, "load_list");
	load_sub = (LOAD_SUB)GetProcAddress(gLibRTC5, "load_sub");
	load_char = (LOAD_CHAR)GetProcAddress(gLibRTC5, "load_char");
	load_text_table = (LOAD_TEXT_TABLE)GetProcAddress(gLibRTC5, "load_text_table");
	get_list_pointer = (GET_LIST_POINTER)GetProcAddress(gLibRTC5, "get_list_pointer");
	get_input_pointer = (GET_INPUT_POINTER)GetProcAddress(gLibRTC5, "get_input_pointer");
	n_execute_list_pos = (N_EXECUTE_LIST_POS)GetProcAddress(gLibRTC5, "n_execute_list_pos");
	n_execute_at_pointer = (N_EXECUTE_AT_POINTER)GetProcAddress(gLibRTC5, "n_execute_at_pointer");
	n_execute_list = (N_EXECUTE_LIST)GetProcAddress(gLibRTC5, "n_execute_list");
	n_execute_list_1 = (N_EXECUTE_LIST_1)GetProcAddress(gLibRTC5, "n_execute_list_1");
	n_execute_list_2 = (N_EXECUTE_LIST_2)GetProcAddress(gLibRTC5, "n_execute_list_2");
	n_get_out_pointer = (N_GET_OUT_POINTER)GetProcAddress(gLibRTC5, "n_get_out_pointer");
	execute_list_pos = (EXECUTE_LIST_POS)GetProcAddress(gLibRTC5, "execute_list_pos");
	execute_at_pointer = (EXECUTE_AT_POINTER)GetProcAddress(gLibRTC5, "execute_at_pointer");
	execute_list = (EXECUTE_LIST)GetProcAddress(gLibRTC5, "execute_list");
	execute_list_1 = (EXECUTE_LIST_1)GetProcAddress(gLibRTC5, "execute_list_1");
	execute_list_2 = (EXECUTE_LIST_2)GetProcAddress(gLibRTC5, "execute_list_2");
	get_out_pointer = (GET_OUT_POINTER)GetProcAddress(gLibRTC5, "get_out_pointer");
	n_auto_change_pos = (N_AUTO_CHANGE_POS)GetProcAddress(gLibRTC5, "n_auto_change_pos");
	n_start_loop = (N_START_LOOP)GetProcAddress(gLibRTC5, "n_start_loop");
	n_quit_loop = (N_QUIT_LOOP)GetProcAddress(gLibRTC5, "n_quit_loop");
	n_pause_list = (N_PAUSE_LIST)GetProcAddress(gLibRTC5, "n_pause_list");
	n_restart_list = (N_RESTART_LIST)GetProcAddress(gLibRTC5, "n_restart_list");
	n_release_wait = (N_RELEASE_WAIT)GetProcAddress(gLibRTC5, "n_release_wait");
	n_stop_execution = (N_STOP_EXECUTION)GetProcAddress(gLibRTC5, "n_stop_execution");
	n_auto_change = (N_AUTO_CHANGE)GetProcAddress(gLibRTC5, "n_auto_change");
	n_stop_list = (N_STOP_LIST)GetProcAddress(gLibRTC5, "n_stop_list");
	n_get_wait_status = (N_GET_WAIT_STATUS)GetProcAddress(gLibRTC5, "n_get_wait_status");
	n_read_status = (N_READ_STATUS)GetProcAddress(gLibRTC5, "n_read_status");
	n_get_status = (N_GET_STATUS)GetProcAddress(gLibRTC5, "n_get_status");
	auto_change_pos = (AUTO_CHANGE_POS)GetProcAddress(gLibRTC5, "auto_change_pos");
	start_loop = (START_LOOP)GetProcAddress(gLibRTC5, "start_loop");
	quit_loop = (QUIT_LOOP)GetProcAddress(gLibRTC5, "quit_loop");
	pause_list = (PAUSE_LIST)GetProcAddress(gLibRTC5, "pause_list");
	restart_list = (RESTART_LIST)GetProcAddress(gLibRTC5, "restart_list");
	release_wait = (RELEASE_WAIT)GetProcAddress(gLibRTC5, "release_wait");
	stop_execution = (STOP_EXECUTION)GetProcAddress(gLibRTC5, "stop_execution");
	auto_change = (AUTO_CHANGE)GetProcAddress(gLibRTC5, "auto_change");
	stop_list = (STOP_LIST)GetProcAddress(gLibRTC5, "stop_list");
	get_wait_status = (GET_WAIT_STATUS)GetProcAddress(gLibRTC5, "get_wait_status");
	read_status = (READ_STATUS)GetProcAddress(gLibRTC5, "read_status");
	get_status = (GET_STATUS)GetProcAddress(gLibRTC5, "get_status");
	n_set_extstartpos = (N_SET_EXTSTARTPOS)GetProcAddress(gLibRTC5, "n_set_extstartpos");
	n_set_max_counts = (N_SET_MAX_COUNTS)GetProcAddress(gLibRTC5, "n_set_max_counts");
	n_set_control_mode = (N_SET_CONTROL_MODE)GetProcAddress(gLibRTC5, "n_set_control_mode");
	n_simulate_ext_stop = (N_SIMULATE_EXT_STOP)GetProcAddress(gLibRTC5, "n_simulate_ext_stop");
	n_simulate_ext_start_ctrl = (N_SIMULATE_EXT_START_CTRL)GetProcAddress(gLibRTC5, "n_simulate_ext_start_ctrl");
	n_get_counts = (N_GET_COUNTS)GetProcAddress(gLibRTC5, "n_get_counts");
	n_get_startstop_info = (N_GET_STARTSTOP_INFO)GetProcAddress(gLibRTC5, "n_get_startstop_info");
	set_extstartpos = (SET_EXTSTARTPOS)GetProcAddress(gLibRTC5, "set_extstartpos");
	set_max_counts = (SET_MAX_COUNTS)GetProcAddress(gLibRTC5, "set_max_counts");
	set_control_mode = (SET_CONTROL_MODE)GetProcAddress(gLibRTC5, "set_control_mode");
	simulate_ext_stop = (SIMULATE_EXT_STOP)GetProcAddress(gLibRTC5, "simulate_ext_stop");
	simulate_ext_start_ctrl = (SIMULATE_EXT_START_CTRL)GetProcAddress(gLibRTC5, "simulate_ext_start_ctrl");
	get_counts = (GET_COUNTS)GetProcAddress(gLibRTC5, "get_counts");
	get_startstop_info = (GET_STARTSTOP_INFO)GetProcAddress(gLibRTC5, "get_startstop_info");
	n_copy_dst_src = (N_COPY_DST_SRC)GetProcAddress(gLibRTC5, "n_copy_dst_src");
	n_set_char_pointer = (N_SET_CHAR_POINTER)GetProcAddress(gLibRTC5, "n_set_char_pointer");
	n_set_sub_pointer = (N_SET_SUB_POINTER)GetProcAddress(gLibRTC5, "n_set_sub_pointer");
	n_set_text_table_pointer = (N_SET_TEXT_TABLE_POINTER)GetProcAddress(gLibRTC5, "n_set_text_table_pointer");
	n_set_char_table = (N_SET_CHAR_TABLE)GetProcAddress(gLibRTC5, "n_set_char_table");
	n_get_char_pointer = (N_GET_CHAR_POINTER)GetProcAddress(gLibRTC5, "n_get_char_pointer");
	n_get_sub_pointer = (N_GET_SUB_POINTER)GetProcAddress(gLibRTC5, "n_get_sub_pointer");
	n_get_text_table_pointer = (N_GET_TEXT_TABLE_POINTER)GetProcAddress(gLibRTC5, "n_get_text_table_pointer");
	copy_dst_src = (COPY_DST_SRC)GetProcAddress(gLibRTC5, "copy_dst_src");
	set_char_pointer = (SET_CHAR_POINTER)GetProcAddress(gLibRTC5, "set_char_pointer");
	set_sub_pointer = (SET_SUB_POINTER)GetProcAddress(gLibRTC5, "set_sub_pointer");
	set_text_table_pointer = (SET_TEXT_TABLE_POINTER)GetProcAddress(gLibRTC5, "set_text_table_pointer");
	set_char_table = (SET_CHAR_TABLE)GetProcAddress(gLibRTC5, "set_char_table");
	get_char_pointer = (GET_CHAR_POINTER)GetProcAddress(gLibRTC5, "get_char_pointer");
	get_sub_pointer = (GET_SUB_POINTER)GetProcAddress(gLibRTC5, "get_sub_pointer");
	get_text_table_pointer = (GET_TEXT_TABLE_POINTER)GetProcAddress(gLibRTC5, "get_text_table_pointer");
	n_time_update = (N_TIME_UPDATE)GetProcAddress(gLibRTC5, "n_time_update");
	n_set_serial_step = (N_SET_SERIAL_STEP)GetProcAddress(gLibRTC5, "n_set_serial_step");
	n_select_serial_set = (N_SELECT_SERIAL_SET)GetProcAddress(gLibRTC5, "n_select_serial_set");
	n_set_serial = (N_SET_SERIAL)GetProcAddress(gLibRTC5, "n_set_serial");
	n_get_serial = (N_GET_SERIAL)GetProcAddress(gLibRTC5, "n_get_serial");
	n_get_list_serial = (N_GET_LIST_SERIAL)GetProcAddress(gLibRTC5, "n_get_list_serial");
	time_update = (TIME_UPDATE)GetProcAddress(gLibRTC5, "time_update");
	set_serial_step = (SET_SERIAL_STEP)GetProcAddress(gLibRTC5, "set_serial_step");
	select_serial_set = (SELECT_SERIAL_SET)GetProcAddress(gLibRTC5, "select_serial_set");
	set_serial = (SET_SERIAL)GetProcAddress(gLibRTC5, "set_serial");
	get_serial = (GET_SERIAL)GetProcAddress(gLibRTC5, "get_serial");
	get_list_serial = (GET_LIST_SERIAL)GetProcAddress(gLibRTC5, "get_list_serial");
	n_write_io_port_mask = (N_WRITE_IO_PORT_MASK)GetProcAddress(gLibRTC5, "n_write_io_port_mask");
	n_write_8bit_port = (N_WRITE_8BIT_PORT)GetProcAddress(gLibRTC5, "n_write_8bit_port");
	n_read_io_port = (N_READ_IO_PORT)GetProcAddress(gLibRTC5, "n_read_io_port");
	n_read_io_port_buffer = (N_READ_IO_PORT_BUFFER)GetProcAddress(gLibRTC5, "n_read_io_port_buffer");
	n_get_io_status = (N_GET_IO_STATUS)GetProcAddress(gLibRTC5, "n_get_io_status");
	n_read_analog_in = (N_READ_ANALOG_IN)GetProcAddress(gLibRTC5, "n_read_analog_in");
	n_write_da_x = (N_WRITE_DA_X)GetProcAddress(gLibRTC5, "n_write_da_x");
	n_set_laser_off_default = (N_SET_LASER_OFF_DEFAULT)GetProcAddress(gLibRTC5, "n_set_laser_off_default");
	n_set_port_default = (N_SET_PORT_DEFAULT)GetProcAddress(gLibRTC5, "n_set_port_default");
	n_write_io_port = (N_WRITE_IO_PORT)GetProcAddress(gLibRTC5, "n_write_io_port");
	n_write_da_1 = (N_WRITE_DA_1)GetProcAddress(gLibRTC5, "n_write_da_1");
	n_write_da_2 = (N_WRITE_DA_2)GetProcAddress(gLibRTC5, "n_write_da_2");
	write_io_port_mask = (WRITE_IO_PORT_MASK)GetProcAddress(gLibRTC5, "write_io_port_mask");
	write_8bit_port = (WRITE_8BIT_PORT)GetProcAddress(gLibRTC5, "write_8bit_port");
	read_io_port = (READ_IO_PORT)GetProcAddress(gLibRTC5, "read_io_port");
	read_io_port_buffer = (READ_IO_PORT_BUFFER)GetProcAddress(gLibRTC5, "read_io_port_buffer");
	get_io_status = (GET_IO_STATUS)GetProcAddress(gLibRTC5, "get_io_status");
	read_analog_in = (READ_ANALOG_IN)GetProcAddress(gLibRTC5, "read_analog_in");
	write_da_x = (WRITE_DA_X)GetProcAddress(gLibRTC5, "write_da_x");
	set_laser_off_default = (SET_LASER_OFF_DEFAULT)GetProcAddress(gLibRTC5, "set_laser_off_default");
	set_port_default = (SET_PORT_DEFAULT)GetProcAddress(gLibRTC5, "set_port_default");
	write_io_port = (WRITE_IO_PORT)GetProcAddress(gLibRTC5, "write_io_port");
	write_da_1 = (WRITE_DA_1)GetProcAddress(gLibRTC5, "write_da_1");
	write_da_2 = (WRITE_DA_2)GetProcAddress(gLibRTC5, "write_da_2");
	n_disable_laser = (N_DISABLE_LASER)GetProcAddress(gLibRTC5, "n_disable_laser");
	n_enable_laser = (N_ENABLE_LASER)GetProcAddress(gLibRTC5, "n_enable_laser");
	n_laser_signal_on = (N_LASER_SIGNAL_ON)GetProcAddress(gLibRTC5, "n_laser_signal_on");
	n_laser_signal_off = (N_LASER_SIGNAL_OFF)GetProcAddress(gLibRTC5, "n_laser_signal_off");
	n_set_standby = (N_SET_STANDBY)GetProcAddress(gLibRTC5, "n_set_standby");
	n_set_laser_pulses_ctrl = (N_SET_LASER_PULSES_CTRL)GetProcAddress(gLibRTC5, "n_set_laser_pulses_ctrl");
	n_set_firstpulse_killer = (N_SET_FIRSTPULSE_KILLER)GetProcAddress(gLibRTC5, "n_set_firstpulse_killer");
	n_set_qswitch_delay = (N_SET_QSWITCH_DELAY)GetProcAddress(gLibRTC5, "n_set_qswitch_delay");
	n_set_laser_mode = (N_SET_LASER_MODE)GetProcAddress(gLibRTC5, "n_set_laser_mode");
	n_set_laser_control = (N_SET_LASER_CONTROL)GetProcAddress(gLibRTC5, "n_set_laser_control");
	n_set_laser_pin_out = (N_SET_LASER_PIN_OUT)GetProcAddress(gLibRTC5, "n_set_laser_pin_out");
	n_get_laser_pin_in = (N_GET_LASER_PIN_IN)GetProcAddress(gLibRTC5, "n_get_laser_pin_in");
	n_set_softstart_level = (N_SET_SOFTSTART_LEVEL)GetProcAddress(gLibRTC5, "n_set_softstart_level");
	n_set_softstart_mode = (N_SET_SOFTSTART_MODE)GetProcAddress(gLibRTC5, "n_set_softstart_mode");
	n_set_auto_laser_control = (N_SET_AUTO_LASER_CONTROL)GetProcAddress(gLibRTC5, "n_set_auto_laser_control");
	n_set_auto_laser_params = (N_SET_AUTO_LASER_PARAMS)GetProcAddress(gLibRTC5, "n_set_auto_laser_params");
	n_load_auto_laser_control = (N_LOAD_AUTO_LASER_CONTROL)GetProcAddress(gLibRTC5, "n_load_auto_laser_control");
	n_load_position_control = (N_LOAD_POSITION_CONTROL)GetProcAddress(gLibRTC5, "n_load_position_control");
	n_set_default_pixel = (N_SET_DEFAULT_PIXEL)GetProcAddress(gLibRTC5, "n_set_default_pixel");
	n_get_standby = (N_GET_STANDBY)GetProcAddress(gLibRTC5, "n_get_standby");
	n_set_pulse_picking = (N_SET_PULSE_PICKING)GetProcAddress(gLibRTC5, "n_set_pulse_picking");
	n_set_pulse_picking_length = (N_SET_PULSE_PICKING_LENGTH)GetProcAddress(gLibRTC5, "n_set_pulse_picking_length");
	n_config_laser_signals = (N_CONFIG_LASER_SIGNALS)GetProcAddress(gLibRTC5, "n_config_laser_signals");
	disable_laser = (DISABLE_LASER)GetProcAddress(gLibRTC5, "disable_laser");
	enable_laser = (ENABLE_LASER)GetProcAddress(gLibRTC5, "enable_laser");
	laser_signal_on = (LASER_SIGNAL_ON)GetProcAddress(gLibRTC5, "laser_signal_on");
	laser_signal_off = (LASER_SIGNAL_OFF)GetProcAddress(gLibRTC5, "laser_signal_off");
	set_standby = (SET_STANDBY)GetProcAddress(gLibRTC5, "set_standby");
	set_laser_pulses_ctrl = (SET_LASER_PULSES_CTRL)GetProcAddress(gLibRTC5, "set_laser_pulses_ctrl");
	set_firstpulse_killer = (SET_FIRSTPULSE_KILLER)GetProcAddress(gLibRTC5, "set_firstpulse_killer");
	set_qswitch_delay = (SET_QSWITCH_DELAY)GetProcAddress(gLibRTC5, "set_qswitch_delay");
	set_laser_mode = (SET_LASER_MODE)GetProcAddress(gLibRTC5, "set_laser_mode");
	set_laser_control = (SET_LASER_CONTROL)GetProcAddress(gLibRTC5, "set_laser_control");
	set_laser_pin_out = (SET_LASER_PIN_OUT)GetProcAddress(gLibRTC5, "set_laser_pin_out");
	get_laser_pin_in = (GET_LASER_PIN_IN)GetProcAddress(gLibRTC5, "get_laser_pin_in");
	set_softstart_level = (SET_SOFTSTART_LEVEL)GetProcAddress(gLibRTC5, "set_softstart_level");
	set_softstart_mode = (SET_SOFTSTART_MODE)GetProcAddress(gLibRTC5, "set_softstart_mode");
	set_auto_laser_control = (SET_AUTO_LASER_CONTROL)GetProcAddress(gLibRTC5, "set_auto_laser_control");
	set_auto_laser_params = (SET_AUTO_LASER_PARAMS)GetProcAddress(gLibRTC5, "set_auto_laser_params");
	load_auto_laser_control = (LOAD_AUTO_LASER_CONTROL)GetProcAddress(gLibRTC5, "load_auto_laser_control");
	load_position_control = (LOAD_POSITION_CONTROL)GetProcAddress(gLibRTC5, "load_position_control");
	set_default_pixel = (SET_DEFAULT_PIXEL)GetProcAddress(gLibRTC5, "set_default_pixel");
	get_standby = (GET_STANDBY)GetProcAddress(gLibRTC5, "get_standby");
	set_pulse_picking = (SET_PULSE_PICKING)GetProcAddress(gLibRTC5, "set_pulse_picking");
	set_pulse_picking_length = (SET_PULSE_PICKING_LENGTH)GetProcAddress(gLibRTC5, "set_pulse_picking_length");
	config_laser_signals = (CONFIG_LASER_SIGNALS)GetProcAddress(gLibRTC5, "config_laser_signals");
	n_set_ext_start_delay = (N_SET_EXT_START_DELAY)GetProcAddress(gLibRTC5, "n_set_ext_start_delay");
	n_set_rot_center = (N_SET_ROT_CENTER)GetProcAddress(gLibRTC5, "n_set_rot_center");
	n_simulate_encoder = (N_SIMULATE_ENCODER)GetProcAddress(gLibRTC5, "n_simulate_encoder");
	n_get_marking_info = (N_GET_MARKING_INFO)GetProcAddress(gLibRTC5, "n_get_marking_info");
	n_set_encoder_speed_ctrl = (N_SET_ENCODER_SPEED_CTRL)GetProcAddress(gLibRTC5, "n_set_encoder_speed_ctrl");
	n_set_mcbsp_x = (N_SET_MCBSP_X)GetProcAddress(gLibRTC5, "n_set_mcbsp_x");
	n_set_mcbsp_y = (N_SET_MCBSP_Y)GetProcAddress(gLibRTC5, "n_set_mcbsp_y");
	n_set_mcbsp_rot = (N_SET_MCBSP_ROT)GetProcAddress(gLibRTC5, "n_set_mcbsp_rot");
	n_set_mcbsp_matrix = (N_SET_MCBSP_MATRIX)GetProcAddress(gLibRTC5, "n_set_mcbsp_matrix");
	n_set_mcbsp_in = (N_SET_MCBSP_IN)GetProcAddress(gLibRTC5, "n_set_mcbsp_in");
	n_set_multi_mcbsp_in = (N_SET_MULTI_MCBSP_IN)GetProcAddress(gLibRTC5, "n_set_multi_mcbsp_in");
	n_set_fly_tracking_error = (N_SET_FLY_TRACKING_ERROR)GetProcAddress(gLibRTC5, "n_set_fly_tracking_error");
	n_load_fly_2d_table = (N_LOAD_FLY_2D_TABLE)GetProcAddress(gLibRTC5, "n_load_fly_2d_table");
	n_init_fly_2d = (N_INIT_FLY_2D)GetProcAddress(gLibRTC5, "n_init_fly_2d");
	n_get_fly_2d_offset = (N_GET_FLY_2D_OFFSET)GetProcAddress(gLibRTC5, "n_get_fly_2d_offset");
	n_get_encoder = (N_GET_ENCODER)GetProcAddress(gLibRTC5, "n_get_encoder");
	n_read_encoder = (N_READ_ENCODER)GetProcAddress(gLibRTC5, "n_read_encoder");
	n_get_mcbsp = (N_GET_MCBSP)GetProcAddress(gLibRTC5, "n_get_mcbsp");
	n_read_mcbsp = (N_READ_MCBSP)GetProcAddress(gLibRTC5, "n_read_mcbsp");
	n_read_multi_mcbsp = (N_READ_MULTI_MCBSP)GetProcAddress(gLibRTC5, "n_read_multi_mcbsp");
	set_ext_start_delay = (SET_EXT_START_DELAY)GetProcAddress(gLibRTC5, "set_ext_start_delay");
	set_rot_center = (SET_ROT_CENTER)GetProcAddress(gLibRTC5, "set_rot_center");
	simulate_encoder = (SIMULATE_ENCODER)GetProcAddress(gLibRTC5, "simulate_encoder");
	get_marking_info = (GET_MARKING_INFO)GetProcAddress(gLibRTC5, "get_marking_info");
	set_encoder_speed_ctrl = (SET_ENCODER_SPEED_CTRL)GetProcAddress(gLibRTC5, "set_encoder_speed_ctrl");
	set_mcbsp_x = (SET_MCBSP_X)GetProcAddress(gLibRTC5, "set_mcbsp_x");
	set_mcbsp_y = (SET_MCBSP_Y)GetProcAddress(gLibRTC5, "set_mcbsp_y");
	set_mcbsp_rot = (SET_MCBSP_ROT)GetProcAddress(gLibRTC5, "set_mcbsp_rot");
	set_mcbsp_matrix = (SET_MCBSP_MATRIX)GetProcAddress(gLibRTC5, "set_mcbsp_matrix");
	set_mcbsp_in = (SET_MCBSP_IN)GetProcAddress(gLibRTC5, "set_mcbsp_in");
	set_multi_mcbsp_in = (SET_MULTI_MCBSP_IN)GetProcAddress(gLibRTC5, "set_multi_mcbsp_in");
	set_fly_tracking_error = (SET_FLY_TRACKING_ERROR)GetProcAddress(gLibRTC5, "set_fly_tracking_error");
	load_fly_2d_table = (LOAD_FLY_2D_TABLE)GetProcAddress(gLibRTC5, "load_fly_2d_table");
	init_fly_2d = (INIT_FLY_2D)GetProcAddress(gLibRTC5, "init_fly_2d");
	get_fly_2d_offset = (GET_FLY_2D_OFFSET)GetProcAddress(gLibRTC5, "get_fly_2d_offset");
	get_encoder = (GET_ENCODER)GetProcAddress(gLibRTC5, "get_encoder");
	read_encoder = (READ_ENCODER)GetProcAddress(gLibRTC5, "read_encoder");
	get_mcbsp = (GET_MCBSP)GetProcAddress(gLibRTC5, "get_mcbsp");
	read_mcbsp = (READ_MCBSP)GetProcAddress(gLibRTC5, "read_mcbsp");
	read_multi_mcbsp = (READ_MULTI_MCBSP)GetProcAddress(gLibRTC5, "read_multi_mcbsp");
	n_get_time = (N_GET_TIME)GetProcAddress(gLibRTC5, "n_get_time");
	n_measurement_status = (N_MEASUREMENT_STATUS)GetProcAddress(gLibRTC5, "n_measurement_status");
	n_get_waveform = (N_GET_WAVEFORM)GetProcAddress(gLibRTC5, "n_get_waveform");
	n_bounce_supp = (N_BOUNCE_SUPP)GetProcAddress(gLibRTC5, "n_bounce_supp");
	n_home_position_xyz = (N_HOME_POSITION_XYZ)GetProcAddress(gLibRTC5, "n_home_position_xyz");
	n_home_position = (N_HOME_POSITION)GetProcAddress(gLibRTC5, "n_home_position");
	n_rs232_config = (N_RS232_CONFIG)GetProcAddress(gLibRTC5, "n_rs232_config");
	n_rs232_write_data = (N_RS232_WRITE_DATA)GetProcAddress(gLibRTC5, "n_rs232_write_data");
	n_rs232_write_text = (N_RS232_WRITE_TEXT)GetProcAddress(gLibRTC5, "n_rs232_write_text");
	n_rs232_read_data = (N_RS232_READ_DATA)GetProcAddress(gLibRTC5, "n_rs232_read_data");
	n_set_mcbsp_freq = (N_SET_MCBSP_FREQ)GetProcAddress(gLibRTC5, "n_set_mcbsp_freq");
	n_mcbsp_init = (N_MCBSP_INIT)GetProcAddress(gLibRTC5, "n_mcbsp_init");
	n_get_overrun = (N_GET_OVERRUN)GetProcAddress(gLibRTC5, "n_get_overrun");
	n_get_master_slave = (N_GET_MASTER_SLAVE)GetProcAddress(gLibRTC5, "n_get_master_slave");
	n_get_transform = (N_GET_TRANSFORM)GetProcAddress(gLibRTC5, "n_get_transform");
	n_stop_trigger = (N_STOP_TRIGGER)GetProcAddress(gLibRTC5, "n_stop_trigger");
	n_move_to = (N_MOVE_TO)GetProcAddress(gLibRTC5, "n_move_to");
	n_set_enduring_wobbel = (N_SET_ENDURING_WOBBEL)GetProcAddress(gLibRTC5, "n_set_enduring_wobbel");
	n_set_free_variable = (N_SET_FREE_VARIABLE)GetProcAddress(gLibRTC5, "n_set_free_variable");
	n_get_free_variable = (N_GET_FREE_VARIABLE)GetProcAddress(gLibRTC5, "n_get_free_variable");
	n_set_mcbsp_out_ptr = (N_SET_MCBSP_OUT_PTR)GetProcAddress(gLibRTC5, "n_set_mcbsp_out_ptr");
	get_time = (GET_TIME)GetProcAddress(gLibRTC5, "get_time");
	measurement_status = (MEASUREMENT_STATUS)GetProcAddress(gLibRTC5, "measurement_status");
	get_waveform = (GET_WAVEFORM)GetProcAddress(gLibRTC5, "get_waveform");
	bounce_supp = (BOUNCE_SUPP)GetProcAddress(gLibRTC5, "bounce_supp");
	home_position_xyz = (HOME_POSITION_XYZ)GetProcAddress(gLibRTC5, "home_position_xyz");
	home_position = (HOME_POSITION)GetProcAddress(gLibRTC5, "home_position");
	rs232_config = (RS232_CONFIG)GetProcAddress(gLibRTC5, "rs232_config");
	rs232_write_data = (RS232_WRITE_DATA)GetProcAddress(gLibRTC5, "rs232_write_data");
	rs232_write_text = (RS232_WRITE_TEXT)GetProcAddress(gLibRTC5, "rs232_write_text");
	rs232_read_data = (RS232_READ_DATA)GetProcAddress(gLibRTC5, "rs232_read_data");
	set_mcbsp_freq = (SET_MCBSP_FREQ)GetProcAddress(gLibRTC5, "set_mcbsp_freq");
	mcbsp_init = (MCBSP_INIT)GetProcAddress(gLibRTC5, "mcbsp_init");
	get_overrun = (GET_OVERRUN)GetProcAddress(gLibRTC5, "get_overrun");
	get_master_slave = (GET_MASTER_SLAVE)GetProcAddress(gLibRTC5, "get_master_slave");
	get_transform = (GET_TRANSFORM)GetProcAddress(gLibRTC5, "get_transform");
	stop_trigger = (STOP_TRIGGER)GetProcAddress(gLibRTC5, "stop_trigger");
	move_to = (MOVE_TO)GetProcAddress(gLibRTC5, "move_to");
	set_enduring_wobbel = (SET_ENDURING_WOBBEL)GetProcAddress(gLibRTC5, "set_enduring_wobbel");
	set_free_variable = (SET_FREE_VARIABLE)GetProcAddress(gLibRTC5, "set_free_variable");
	get_free_variable = (GET_FREE_VARIABLE)GetProcAddress(gLibRTC5, "get_free_variable");
	set_mcbsp_out_ptr = (SET_MCBSP_OUT_PTR)GetProcAddress(gLibRTC5, "set_mcbsp_out_ptr");
	n_set_defocus = (N_SET_DEFOCUS)GetProcAddress(gLibRTC5, "n_set_defocus");
	n_goto_xyz = (N_GOTO_XYZ)GetProcAddress(gLibRTC5, "n_goto_xyz");
	n_goto_xy = (N_GOTO_XY)GetProcAddress(gLibRTC5, "n_goto_xy");
	n_get_z_distance = (N_GET_Z_DISTANCE)GetProcAddress(gLibRTC5, "n_get_z_distance");
	set_defocus = (SET_DEFOCUS)GetProcAddress(gLibRTC5, "set_defocus");
	goto_xyz = (GOTO_XYZ)GetProcAddress(gLibRTC5, "goto_xyz");
	goto_xy = (GOTO_XY)GetProcAddress(gLibRTC5, "goto_xy");
	get_z_distance = (GET_Z_DISTANCE)GetProcAddress(gLibRTC5, "get_z_distance");
	n_set_offset_xyz = (N_SET_OFFSET_XYZ)GetProcAddress(gLibRTC5, "n_set_offset_xyz");
	n_set_offset = (N_SET_OFFSET)GetProcAddress(gLibRTC5, "n_set_offset");
	n_set_matrix = (N_SET_MATRIX)GetProcAddress(gLibRTC5, "n_set_matrix");
	n_set_angle = (N_SET_ANGLE)GetProcAddress(gLibRTC5, "n_set_angle");
	n_set_scale = (N_SET_SCALE)GetProcAddress(gLibRTC5, "n_set_scale");
	n_apply_mcbsp = (N_APPLY_MCBSP)GetProcAddress(gLibRTC5, "n_apply_mcbsp");
	n_upload_transform = (N_UPLOAD_TRANSFORM)GetProcAddress(gLibRTC5, "n_upload_transform");
	set_offset_xyz = (SET_OFFSET_XYZ)GetProcAddress(gLibRTC5, "set_offset_xyz");
	set_offset = (SET_OFFSET)GetProcAddress(gLibRTC5, "set_offset");
	set_matrix = (SET_MATRIX)GetProcAddress(gLibRTC5, "set_matrix");
	set_angle = (SET_ANGLE)GetProcAddress(gLibRTC5, "set_angle");
	set_scale = (SET_SCALE)GetProcAddress(gLibRTC5, "set_scale");
	apply_mcbsp = (APPLY_MCBSP)GetProcAddress(gLibRTC5, "apply_mcbsp");
	upload_transform = (UPLOAD_TRANSFORM)GetProcAddress(gLibRTC5, "upload_transform");
	transform = (TRANSFORM)GetProcAddress(gLibRTC5, "transform");
	n_set_delay_mode = (N_SET_DELAY_MODE)GetProcAddress(gLibRTC5, "n_set_delay_mode");
	n_set_jump_speed_ctrl = (N_SET_JUMP_SPEED_CTRL)GetProcAddress(gLibRTC5, "n_set_jump_speed_ctrl");
	n_set_mark_speed_ctrl = (N_SET_MARK_SPEED_CTRL)GetProcAddress(gLibRTC5, "n_set_mark_speed_ctrl");
	n_set_sky_writing_para = (N_SET_SKY_WRITING_PARA)GetProcAddress(gLibRTC5, "n_set_sky_writing_para");
	n_set_sky_writing_limit = (N_SET_SKY_WRITING_LIMIT)GetProcAddress(gLibRTC5, "n_set_sky_writing_limit");
	n_set_sky_writing_mode = (N_SET_SKY_WRITING_MODE)GetProcAddress(gLibRTC5, "n_set_sky_writing_mode");
	n_load_varpolydelay = (N_LOAD_VARPOLYDELAY)GetProcAddress(gLibRTC5, "n_load_varpolydelay");
	n_set_hi = (N_SET_HI)GetProcAddress(gLibRTC5, "n_set_hi");
	n_get_hi_pos = (N_GET_HI_POS)GetProcAddress(gLibRTC5, "n_get_hi_pos");
	n_auto_cal = (N_AUTO_CAL)GetProcAddress(gLibRTC5, "n_auto_cal");
	n_get_auto_cal = (N_GET_AUTO_CAL)GetProcAddress(gLibRTC5, "n_get_auto_cal");
	n_set_sky_writing = (N_SET_SKY_WRITING)GetProcAddress(gLibRTC5, "n_set_sky_writing");
	n_get_hi_data = (N_GET_HI_DATA)GetProcAddress(gLibRTC5, "n_get_hi_data");
	set_delay_mode = (SET_DELAY_MODE)GetProcAddress(gLibRTC5, "set_delay_mode");
	set_jump_speed_ctrl = (SET_JUMP_SPEED_CTRL)GetProcAddress(gLibRTC5, "set_jump_speed_ctrl");
	set_mark_speed_ctrl = (SET_MARK_SPEED_CTRL)GetProcAddress(gLibRTC5, "set_mark_speed_ctrl");
	set_sky_writing_para = (SET_SKY_WRITING_PARA)GetProcAddress(gLibRTC5, "set_sky_writing_para");
	set_sky_writing_limit = (SET_SKY_WRITING_LIMIT)GetProcAddress(gLibRTC5, "set_sky_writing_limit");
	set_sky_writing_mode = (SET_SKY_WRITING_MODE)GetProcAddress(gLibRTC5, "set_sky_writing_mode");
	load_varpolydelay = (LOAD_VARPOLYDELAY)GetProcAddress(gLibRTC5, "load_varpolydelay");
	set_hi = (SET_HI)GetProcAddress(gLibRTC5, "set_hi");
	get_hi_pos = (GET_HI_POS)GetProcAddress(gLibRTC5, "get_hi_pos");
	auto_cal = (AUTO_CAL)GetProcAddress(gLibRTC5, "auto_cal");
	get_auto_cal = (GET_AUTO_CAL)GetProcAddress(gLibRTC5, "get_auto_cal");
	set_sky_writing = (SET_SKY_WRITING)GetProcAddress(gLibRTC5, "set_sky_writing");
	get_hi_data = (GET_HI_DATA)GetProcAddress(gLibRTC5, "get_hi_data");
	n_send_user_data = (N_SEND_USER_DATA)GetProcAddress(gLibRTC5, "n_send_user_data");
	n_read_user_data = (N_READ_USER_DATA)GetProcAddress(gLibRTC5, "n_read_user_data");
	n_control_command = (N_CONTROL_COMMAND)GetProcAddress(gLibRTC5, "n_control_command");
	n_get_value = (N_GET_VALUE)GetProcAddress(gLibRTC5, "n_get_value");
	n_get_values = (N_GET_VALUES)GetProcAddress(gLibRTC5, "n_get_values");
	n_get_head_status = (N_GET_HEAD_STATUS)GetProcAddress(gLibRTC5, "n_get_head_status");
	n_set_jump_mode = (N_SET_JUMP_MODE)GetProcAddress(gLibRTC5, "n_set_jump_mode");
	n_load_jump_table_offset = (N_LOAD_JUMP_TABLE_OFFSET)GetProcAddress(gLibRTC5, "n_load_jump_table_offset");
	n_get_jump_table = (N_GET_JUMP_TABLE)GetProcAddress(gLibRTC5, "n_get_jump_table");
	n_set_jump_table = (N_SET_JUMP_TABLE)GetProcAddress(gLibRTC5, "n_set_jump_table");
	n_load_jump_table = (N_LOAD_JUMP_TABLE)GetProcAddress(gLibRTC5, "n_load_jump_table");
	send_user_data = (SEND_USER_DATA)GetProcAddress(gLibRTC5, "send_user_data");
	read_user_data = (READ_USER_DATA)GetProcAddress(gLibRTC5, "read_user_data");
	control_command = (CONTROL_COMMAND)GetProcAddress(gLibRTC5, "control_command");
	get_value = (GET_VALUE)GetProcAddress(gLibRTC5, "get_value");
	get_values = (GET_VALUES)GetProcAddress(gLibRTC5, "get_values");
	get_head_status = (GET_HEAD_STATUS)GetProcAddress(gLibRTC5, "get_head_status");
	set_jump_mode = (SET_JUMP_MODE)GetProcAddress(gLibRTC5, "set_jump_mode");
	load_jump_table_offset = (LOAD_JUMP_TABLE_OFFSET)GetProcAddress(gLibRTC5, "load_jump_table_offset");
	get_jump_table = (GET_JUMP_TABLE)GetProcAddress(gLibRTC5, "get_jump_table");
	set_jump_table = (SET_JUMP_TABLE)GetProcAddress(gLibRTC5, "set_jump_table");
	load_jump_table = (LOAD_JUMP_TABLE)GetProcAddress(gLibRTC5, "load_jump_table");
	n_stepper_init = (N_STEPPER_INIT)GetProcAddress(gLibRTC5, "n_stepper_init");
	n_stepper_enable = (N_STEPPER_ENABLE)GetProcAddress(gLibRTC5, "n_stepper_enable");
	n_stepper_control = (N_STEPPER_CONTROL)GetProcAddress(gLibRTC5, "n_stepper_control");
	n_stepper_abs_no = (N_STEPPER_ABS_NO)GetProcAddress(gLibRTC5, "n_stepper_abs_no");
	n_stepper_rel_no = (N_STEPPER_REL_NO)GetProcAddress(gLibRTC5, "n_stepper_rel_no");
	n_stepper_abs = (N_STEPPER_ABS)GetProcAddress(gLibRTC5, "n_stepper_abs");
	n_stepper_rel = (N_STEPPER_REL)GetProcAddress(gLibRTC5, "n_stepper_rel");
	n_get_stepper_status = (N_GET_STEPPER_STATUS)GetProcAddress(gLibRTC5, "n_get_stepper_status");
	stepper_init = (STEPPER_INIT)GetProcAddress(gLibRTC5, "stepper_init");
	stepper_enable = (STEPPER_ENABLE)GetProcAddress(gLibRTC5, "stepper_enable");
	stepper_control = (STEPPER_CONTROL)GetProcAddress(gLibRTC5, "stepper_control");
	stepper_abs_no = (STEPPER_ABS_NO)GetProcAddress(gLibRTC5, "stepper_abs_no");
	stepper_rel_no = (STEPPER_REL_NO)GetProcAddress(gLibRTC5, "stepper_rel_no");
	stepper_abs = (STEPPER_ABS)GetProcAddress(gLibRTC5, "stepper_abs");
	stepper_rel = (STEPPER_REL)GetProcAddress(gLibRTC5, "stepper_rel");
	get_stepper_status = (GET_STEPPER_STATUS)GetProcAddress(gLibRTC5, "get_stepper_status");
	n_select_cor_table_list = (N_SELECT_COR_TABLE_LIST)GetProcAddress(gLibRTC5, "n_select_cor_table_list");
	select_cor_table_list = (SELECT_COR_TABLE_LIST)GetProcAddress(gLibRTC5, "select_cor_table_list");
	n_list_nop = (N_LIST_NOP)GetProcAddress(gLibRTC5, "n_list_nop");
	n_list_continue = (N_LIST_CONTINUE)GetProcAddress(gLibRTC5, "n_list_continue");
	n_long_delay = (N_LONG_DELAY)GetProcAddress(gLibRTC5, "n_long_delay");
	n_set_end_of_list = (N_SET_END_OF_LIST)GetProcAddress(gLibRTC5, "n_set_end_of_list");
	n_set_wait = (N_SET_WAIT)GetProcAddress(gLibRTC5, "n_set_wait");
	n_list_jump_pos = (N_LIST_JUMP_POS)GetProcAddress(gLibRTC5, "n_list_jump_pos");
	n_list_jump_rel = (N_LIST_JUMP_REL)GetProcAddress(gLibRTC5, "n_list_jump_rel");
	n_list_repeat = (N_LIST_REPEAT)GetProcAddress(gLibRTC5, "n_list_repeat");
	n_list_until = (N_LIST_UNTIL)GetProcAddress(gLibRTC5, "n_list_until");
	n_range_checking = (N_RANGE_CHECKING)GetProcAddress(gLibRTC5, "n_range_checking");
	n_set_list_jump = (N_SET_LIST_JUMP)GetProcAddress(gLibRTC5, "n_set_list_jump");
	list_nop = (LIST_NOP)GetProcAddress(gLibRTC5, "list_nop");
	list_continue = (LIST_CONTINUE)GetProcAddress(gLibRTC5, "list_continue");
	long_delay = (LONG_DELAY)GetProcAddress(gLibRTC5, "long_delay");
	set_end_of_list = (SET_END_OF_LIST)GetProcAddress(gLibRTC5, "set_end_of_list");
	set_wait = (SET_WAIT)GetProcAddress(gLibRTC5, "set_wait");
	list_jump_pos = (LIST_JUMP_POS)GetProcAddress(gLibRTC5, "list_jump_pos");
	list_jump_rel = (LIST_JUMP_REL)GetProcAddress(gLibRTC5, "list_jump_rel");
	list_repeat = (LIST_REPEAT)GetProcAddress(gLibRTC5, "list_repeat");
	list_until = (LIST_UNTIL)GetProcAddress(gLibRTC5, "list_until");
	range_checking = (RANGE_CHECKING)GetProcAddress(gLibRTC5, "range_checking");
	set_list_jump = (SET_LIST_JUMP)GetProcAddress(gLibRTC5, "set_list_jump");
	n_set_extstartpos_list = (N_SET_EXTSTARTPOS_LIST)GetProcAddress(gLibRTC5, "n_set_extstartpos_list");
	n_set_control_mode_list = (N_SET_CONTROL_MODE_LIST)GetProcAddress(gLibRTC5, "n_set_control_mode_list");
	n_simulate_ext_start = (N_SIMULATE_EXT_START)GetProcAddress(gLibRTC5, "n_simulate_ext_start");
	set_extstartpos_list = (SET_EXTSTARTPOS_LIST)GetProcAddress(gLibRTC5, "set_extstartpos_list");
	set_control_mode_list = (SET_CONTROL_MODE_LIST)GetProcAddress(gLibRTC5, "set_control_mode_list");
	simulate_ext_start = (SIMULATE_EXT_START)GetProcAddress(gLibRTC5, "simulate_ext_start");
	n_list_return = (N_LIST_RETURN)GetProcAddress(gLibRTC5, "n_list_return");
	n_list_call = (N_LIST_CALL)GetProcAddress(gLibRTC5, "n_list_call");
	n_list_call_abs = (N_LIST_CALL_ABS)GetProcAddress(gLibRTC5, "n_list_call_abs");
	n_sub_call = (N_SUB_CALL)GetProcAddress(gLibRTC5, "n_sub_call");
	n_sub_call_abs = (N_SUB_CALL_ABS)GetProcAddress(gLibRTC5, "n_sub_call_abs");
	list_return = (LIST_RETURN)GetProcAddress(gLibRTC5, "list_return");
	list_call = (LIST_CALL)GetProcAddress(gLibRTC5, "list_call");
	list_call_abs = (LIST_CALL_ABS)GetProcAddress(gLibRTC5, "list_call_abs");
	sub_call = (SUB_CALL)GetProcAddress(gLibRTC5, "sub_call");
	sub_call_abs = (SUB_CALL_ABS)GetProcAddress(gLibRTC5, "sub_call_abs");
	n_list_call_cond = (N_LIST_CALL_COND)GetProcAddress(gLibRTC5, "n_list_call_cond");
	n_list_call_abs_cond = (N_LIST_CALL_ABS_COND)GetProcAddress(gLibRTC5, "n_list_call_abs_cond");
	n_sub_call_cond = (N_SUB_CALL_COND)GetProcAddress(gLibRTC5, "n_sub_call_cond");
	n_sub_call_abs_cond = (N_SUB_CALL_ABS_COND)GetProcAddress(gLibRTC5, "n_sub_call_abs_cond");
	n_list_jump_pos_cond = (N_LIST_JUMP_POS_COND)GetProcAddress(gLibRTC5, "n_list_jump_pos_cond");
	n_list_jump_rel_cond = (N_LIST_JUMP_REL_COND)GetProcAddress(gLibRTC5, "n_list_jump_rel_cond");
	n_if_cond = (N_IF_COND)GetProcAddress(gLibRTC5, "n_if_cond");
	n_if_not_cond = (N_IF_NOT_COND)GetProcAddress(gLibRTC5, "n_if_not_cond");
	n_if_pin_cond = (N_IF_PIN_COND)GetProcAddress(gLibRTC5, "n_if_pin_cond");
	n_if_not_pin_cond = (N_IF_NOT_PIN_COND)GetProcAddress(gLibRTC5, "n_if_not_pin_cond");
	n_switch_ioport = (N_SWITCH_IOPORT)GetProcAddress(gLibRTC5, "n_switch_ioport");
	n_list_jump_cond = (N_LIST_JUMP_COND)GetProcAddress(gLibRTC5, "n_list_jump_cond");
	list_call_cond = (LIST_CALL_COND)GetProcAddress(gLibRTC5, "list_call_cond");
	list_call_abs_cond = (LIST_CALL_ABS_COND)GetProcAddress(gLibRTC5, "list_call_abs_cond");
	sub_call_cond = (SUB_CALL_COND)GetProcAddress(gLibRTC5, "sub_call_cond");
	sub_call_abs_cond = (SUB_CALL_ABS_COND)GetProcAddress(gLibRTC5, "sub_call_abs_cond");
	list_jump_pos_cond = (LIST_JUMP_POS_COND)GetProcAddress(gLibRTC5, "list_jump_pos_cond");
	list_jump_rel_cond = (LIST_JUMP_REL_COND)GetProcAddress(gLibRTC5, "list_jump_rel_cond");
	if_cond = (IF_COND)GetProcAddress(gLibRTC5, "if_cond");
	if_not_cond = (IF_NOT_COND)GetProcAddress(gLibRTC5, "if_not_cond");
	if_pin_cond = (IF_PIN_COND)GetProcAddress(gLibRTC5, "if_pin_cond");
	if_not_pin_cond = (IF_NOT_PIN_COND)GetProcAddress(gLibRTC5, "if_not_pin_cond");
	switch_ioport = (SWITCH_IOPORT)GetProcAddress(gLibRTC5, "switch_ioport");
	list_jump_cond = (LIST_JUMP_COND)GetProcAddress(gLibRTC5, "list_jump_cond");
	n_select_char_set = (N_SELECT_CHAR_SET)GetProcAddress(gLibRTC5, "n_select_char_set");
	n_mark_text = (N_MARK_TEXT)GetProcAddress(gLibRTC5, "n_mark_text");
	n_mark_text_abs = (N_MARK_TEXT_ABS)GetProcAddress(gLibRTC5, "n_mark_text_abs");
	n_mark_char = (N_MARK_CHAR)GetProcAddress(gLibRTC5, "n_mark_char");
	n_mark_char_abs = (N_MARK_CHAR_ABS)GetProcAddress(gLibRTC5, "n_mark_char_abs");
	select_char_set = (SELECT_CHAR_SET)GetProcAddress(gLibRTC5, "select_char_set");
	mark_text = (MARK_TEXT)GetProcAddress(gLibRTC5, "mark_text");
	mark_text_abs = (MARK_TEXT_ABS)GetProcAddress(gLibRTC5, "mark_text_abs");
	mark_char = (MARK_CHAR)GetProcAddress(gLibRTC5, "mark_char");
	mark_char_abs = (MARK_CHAR_ABS)GetProcAddress(gLibRTC5, "mark_char_abs");
	n_mark_serial = (N_MARK_SERIAL)GetProcAddress(gLibRTC5, "n_mark_serial");
	n_mark_serial_abs = (N_MARK_SERIAL_ABS)GetProcAddress(gLibRTC5, "n_mark_serial_abs");
	n_mark_date = (N_MARK_DATE)GetProcAddress(gLibRTC5, "n_mark_date");
	n_mark_date_abs = (N_MARK_DATE_ABS)GetProcAddress(gLibRTC5, "n_mark_date_abs");
	n_mark_time = (N_MARK_TIME)GetProcAddress(gLibRTC5, "n_mark_time");
	n_mark_time_abs = (N_MARK_TIME_ABS)GetProcAddress(gLibRTC5, "n_mark_time_abs");
	n_select_serial_set_list = (N_SELECT_SERIAL_SET_LIST)GetProcAddress(gLibRTC5, "n_select_serial_set_list");
	n_set_serial_step_list = (N_SET_SERIAL_STEP_LIST)GetProcAddress(gLibRTC5, "n_set_serial_step_list");
	n_time_fix_f_off = (N_TIME_FIX_F_OFF)GetProcAddress(gLibRTC5, "n_time_fix_f_off");
	n_time_fix_f = (N_TIME_FIX_F)GetProcAddress(gLibRTC5, "n_time_fix_f");
	n_time_fix = (N_TIME_FIX)GetProcAddress(gLibRTC5, "n_time_fix");
	mark_serial = (MARK_SERIAL)GetProcAddress(gLibRTC5, "mark_serial");
	mark_serial_abs = (MARK_SERIAL_ABS)GetProcAddress(gLibRTC5, "mark_serial_abs");
	mark_date = (MARK_DATE)GetProcAddress(gLibRTC5, "mark_date");
	mark_date_abs = (MARK_DATE_ABS)GetProcAddress(gLibRTC5, "mark_date_abs");
	mark_time = (MARK_TIME)GetProcAddress(gLibRTC5, "mark_time");
	mark_time_abs = (MARK_TIME_ABS)GetProcAddress(gLibRTC5, "mark_time_abs");
	time_fix_f_off = (TIME_FIX_F_OFF)GetProcAddress(gLibRTC5, "time_fix_f_off");
	select_serial_set_list = (SELECT_SERIAL_SET_LIST)GetProcAddress(gLibRTC5, "select_serial_set_list");
	set_serial_step_list = (SET_SERIAL_STEP_LIST)GetProcAddress(gLibRTC5, "set_serial_step_list");
	time_fix_f = (TIME_FIX_F)GetProcAddress(gLibRTC5, "time_fix_f");
	time_fix = (TIME_FIX)GetProcAddress(gLibRTC5, "time_fix");
	n_clear_io_cond_list = (N_CLEAR_IO_COND_LIST)GetProcAddress(gLibRTC5, "n_clear_io_cond_list");
	n_set_io_cond_list = (N_SET_IO_COND_LIST)GetProcAddress(gLibRTC5, "n_set_io_cond_list");
	n_write_io_port_mask_list = (N_WRITE_IO_PORT_MASK_LIST)GetProcAddress(gLibRTC5, "n_write_io_port_mask_list");
	n_write_8bit_port_list = (N_WRITE_8BIT_PORT_LIST)GetProcAddress(gLibRTC5, "n_write_8bit_port_list");
	n_read_io_port_list = (N_READ_IO_PORT_LIST)GetProcAddress(gLibRTC5, "n_read_io_port_list");
	n_write_da_x_list = (N_WRITE_DA_X_LIST)GetProcAddress(gLibRTC5, "n_write_da_x_list");
	n_write_io_port_list = (N_WRITE_IO_PORT_LIST)GetProcAddress(gLibRTC5, "n_write_io_port_list");
	n_write_da_1_list = (N_WRITE_DA_1_LIST)GetProcAddress(gLibRTC5, "n_write_da_1_list");
	n_write_da_2_list = (N_WRITE_DA_2_LIST)GetProcAddress(gLibRTC5, "n_write_da_2_list");
	clear_io_cond_list = (CLEAR_IO_COND_LIST)GetProcAddress(gLibRTC5, "clear_io_cond_list");
	set_io_cond_list = (SET_IO_COND_LIST)GetProcAddress(gLibRTC5, "set_io_cond_list");
	write_io_port_mask_list = (WRITE_IO_PORT_MASK_LIST)GetProcAddress(gLibRTC5, "write_io_port_mask_list");
	write_8bit_port_list = (WRITE_8BIT_PORT_LIST)GetProcAddress(gLibRTC5, "write_8bit_port_list");
	read_io_port_list = (READ_IO_PORT_LIST)GetProcAddress(gLibRTC5, "read_io_port_list");
	write_da_x_list = (WRITE_DA_X_LIST)GetProcAddress(gLibRTC5, "write_da_x_list");
	write_io_port_list = (WRITE_IO_PORT_LIST)GetProcAddress(gLibRTC5, "write_io_port_list");
	write_da_1_list = (WRITE_DA_1_LIST)GetProcAddress(gLibRTC5, "write_da_1_list");
	write_da_2_list = (WRITE_DA_2_LIST)GetProcAddress(gLibRTC5, "write_da_2_list");
	n_laser_signal_on_list = (N_LASER_SIGNAL_ON_LIST)GetProcAddress(gLibRTC5, "n_laser_signal_on_list");
	n_laser_signal_off_list = (N_LASER_SIGNAL_OFF_LIST)GetProcAddress(gLibRTC5, "n_laser_signal_off_list");
	n_para_laser_on_pulses_list = (N_PARA_LASER_ON_PULSES_LIST)GetProcAddress(gLibRTC5, "n_para_laser_on_pulses_list");
	n_laser_on_pulses_list = (N_LASER_ON_PULSES_LIST)GetProcAddress(gLibRTC5, "n_laser_on_pulses_list");
	n_laser_on_list = (N_LASER_ON_LIST)GetProcAddress(gLibRTC5, "n_laser_on_list");
	n_set_laser_delays = (N_SET_LASER_DELAYS)GetProcAddress(gLibRTC5, "n_set_laser_delays");
	n_set_standby_list = (N_SET_STANDBY_LIST)GetProcAddress(gLibRTC5, "n_set_standby_list");
	n_set_laser_pulses = (N_SET_LASER_PULSES)GetProcAddress(gLibRTC5, "n_set_laser_pulses");
	n_set_firstpulse_killer_list = (N_SET_FIRSTPULSE_KILLER_LIST)GetProcAddress(gLibRTC5, "n_set_firstpulse_killer_list");
	n_set_qswitch_delay_list = (N_SET_QSWITCH_DELAY_LIST)GetProcAddress(gLibRTC5, "n_set_qswitch_delay_list");
	n_set_laser_pin_out_list = (N_SET_LASER_PIN_OUT_LIST)GetProcAddress(gLibRTC5, "n_set_laser_pin_out_list");
	n_set_vector_control = (N_SET_VECTOR_CONTROL)GetProcAddress(gLibRTC5, "n_set_vector_control");
	n_set_default_pixel_list = (N_SET_DEFAULT_PIXEL_LIST)GetProcAddress(gLibRTC5, "n_set_default_pixel_list");
	n_set_auto_laser_params_list = (N_SET_AUTO_LASER_PARAMS_LIST)GetProcAddress(gLibRTC5, "n_set_auto_laser_params_list");
	n_set_pulse_picking_list = (N_SET_PULSE_PICKING_LIST)GetProcAddress(gLibRTC5, "n_set_pulse_picking_list");
	n_set_softstart_level_list = (N_SET_SOFTSTART_LEVEL_LIST)GetProcAddress(gLibRTC5, "n_set_softstart_level_list");
	n_set_softstart_mode_list = (N_SET_SOFTSTART_MODE_LIST)GetProcAddress(gLibRTC5, "n_set_softstart_mode_list");
	n_config_laser_signals_list = (N_CONFIG_LASER_SIGNALS_LIST)GetProcAddress(gLibRTC5, "n_config_laser_signals_list");
	n_set_laser_timing = (N_SET_LASER_TIMING)GetProcAddress(gLibRTC5, "n_set_laser_timing");
	laser_signal_on_list = (LASER_SIGNAL_ON_LIST)GetProcAddress(gLibRTC5, "laser_signal_on_list");
	laser_signal_off_list = (LASER_SIGNAL_OFF_LIST)GetProcAddress(gLibRTC5, "laser_signal_off_list");
	para_laser_on_pulses_list = (PARA_LASER_ON_PULSES_LIST)GetProcAddress(gLibRTC5, "para_laser_on_pulses_list");
	laser_on_pulses_list = (LASER_ON_PULSES_LIST)GetProcAddress(gLibRTC5, "laser_on_pulses_list");
	laser_on_list = (LASER_ON_LIST)GetProcAddress(gLibRTC5, "laser_on_list");
	set_laser_delays = (SET_LASER_DELAYS)GetProcAddress(gLibRTC5, "set_laser_delays");
	set_standby_list = (SET_STANDBY_LIST)GetProcAddress(gLibRTC5, "set_standby_list");
	set_laser_pulses = (SET_LASER_PULSES)GetProcAddress(gLibRTC5, "set_laser_pulses");
	set_firstpulse_killer_list = (SET_FIRSTPULSE_KILLER_LIST)GetProcAddress(gLibRTC5, "set_firstpulse_killer_list");
	set_qswitch_delay_list = (SET_QSWITCH_DELAY_LIST)GetProcAddress(gLibRTC5, "set_qswitch_delay_list");
	set_laser_pin_out_list = (SET_LASER_PIN_OUT_LIST)GetProcAddress(gLibRTC5, "set_laser_pin_out_list");
	set_vector_control = (SET_VECTOR_CONTROL)GetProcAddress(gLibRTC5, "set_vector_control");
	set_default_pixel_list = (SET_DEFAULT_PIXEL_LIST)GetProcAddress(gLibRTC5, "set_default_pixel_list");
	set_auto_laser_params_list = (SET_AUTO_LASER_PARAMS_LIST)GetProcAddress(gLibRTC5, "set_auto_laser_params_list");
	set_pulse_picking_list = (SET_PULSE_PICKING_LIST)GetProcAddress(gLibRTC5, "set_pulse_picking_list");
	set_softstart_level_list = (SET_SOFTSTART_LEVEL_LIST)GetProcAddress(gLibRTC5, "set_softstart_level_list");
	set_softstart_mode_list = (SET_SOFTSTART_MODE_LIST)GetProcAddress(gLibRTC5, "set_softstart_mode_list");
	config_laser_signals_list = (CONFIG_LASER_SIGNALS_LIST)GetProcAddress(gLibRTC5, "config_laser_signals_list");
	set_laser_timing = (SET_LASER_TIMING)GetProcAddress(gLibRTC5, "set_laser_timing");
	n_fly_return_z = (N_FLY_RETURN_Z)GetProcAddress(gLibRTC5, "n_fly_return_z");
	n_fly_return = (N_FLY_RETURN)GetProcAddress(gLibRTC5, "n_fly_return");
	n_set_rot_center_list = (N_SET_ROT_CENTER_LIST)GetProcAddress(gLibRTC5, "n_set_rot_center_list");
	n_set_ext_start_delay_list = (N_SET_EXT_START_DELAY_LIST)GetProcAddress(gLibRTC5, "n_set_ext_start_delay_list");
	n_set_fly_x = (N_SET_FLY_X)GetProcAddress(gLibRTC5, "n_set_fly_x");
	n_set_fly_y = (N_SET_FLY_Y)GetProcAddress(gLibRTC5, "n_set_fly_y");
	n_set_fly_z = (N_SET_FLY_Z)GetProcAddress(gLibRTC5, "n_set_fly_z");
	n_set_fly_rot = (N_SET_FLY_ROT)GetProcAddress(gLibRTC5, "n_set_fly_rot");
	n_set_fly_2d = (N_SET_FLY_2D)GetProcAddress(gLibRTC5, "n_set_fly_2d");
	n_set_fly_x_pos = (N_SET_FLY_X_POS)GetProcAddress(gLibRTC5, "n_set_fly_x_pos");
	n_set_fly_y_pos = (N_SET_FLY_Y_POS)GetProcAddress(gLibRTC5, "n_set_fly_y_pos");
	n_set_fly_rot_pos = (N_SET_FLY_ROT_POS)GetProcAddress(gLibRTC5, "n_set_fly_rot_pos");
	n_set_fly_limits = (N_SET_FLY_LIMITS)GetProcAddress(gLibRTC5, "n_set_fly_limits");
	n_set_fly_limits_z = (N_SET_FLY_LIMITS_Z)GetProcAddress(gLibRTC5, "n_set_fly_limits_z");
	n_if_fly_x_overflow = (N_IF_FLY_X_OVERFLOW)GetProcAddress(gLibRTC5, "n_if_fly_x_overflow");
	n_if_fly_y_overflow = (N_IF_FLY_Y_OVERFLOW)GetProcAddress(gLibRTC5, "n_if_fly_y_overflow");
	n_if_fly_z_overflow = (N_IF_FLY_Z_OVERFLOW)GetProcAddress(gLibRTC5, "n_if_fly_z_overflow");
	n_if_not_fly_x_overflow = (N_IF_NOT_FLY_X_OVERFLOW)GetProcAddress(gLibRTC5, "n_if_not_fly_x_overflow");
	n_if_not_fly_y_overflow = (N_IF_NOT_FLY_Y_OVERFLOW)GetProcAddress(gLibRTC5, "n_if_not_fly_y_overflow");
	n_if_not_fly_z_overflow = (N_IF_NOT_FLY_Z_OVERFLOW)GetProcAddress(gLibRTC5, "n_if_not_fly_z_overflow");
	n_clear_fly_overflow = (N_CLEAR_FLY_OVERFLOW)GetProcAddress(gLibRTC5, "n_clear_fly_overflow");
	n_set_mcbsp_x_list = (N_SET_MCBSP_X_LIST)GetProcAddress(gLibRTC5, "n_set_mcbsp_x_list");
	n_set_mcbsp_y_list = (N_SET_MCBSP_Y_LIST)GetProcAddress(gLibRTC5, "n_set_mcbsp_y_list");
	n_set_mcbsp_rot_list = (N_SET_MCBSP_ROT_LIST)GetProcAddress(gLibRTC5, "n_set_mcbsp_rot_list");
	n_set_mcbsp_matrix_list = (N_SET_MCBSP_MATRIX_LIST)GetProcAddress(gLibRTC5, "n_set_mcbsp_matrix_list");
	n_set_mcbsp_in_list = (N_SET_MCBSP_IN_LIST)GetProcAddress(gLibRTC5, "n_set_mcbsp_in_list");
	n_set_multi_mcbsp_in_list = (N_SET_MULTI_MCBSP_IN_LIST)GetProcAddress(gLibRTC5, "n_set_multi_mcbsp_in_list");
	n_wait_for_encoder_mode = (N_WAIT_FOR_ENCODER_MODE)GetProcAddress(gLibRTC5, "n_wait_for_encoder_mode");
	n_wait_for_mcbsp = (N_WAIT_FOR_MCBSP)GetProcAddress(gLibRTC5, "n_wait_for_mcbsp");
	n_set_encoder_speed = (N_SET_ENCODER_SPEED)GetProcAddress(gLibRTC5, "n_set_encoder_speed");
	n_get_mcbsp_list = (N_GET_MCBSP_LIST)GetProcAddress(gLibRTC5, "n_get_mcbsp_list");
	n_store_encoder = (N_STORE_ENCODER)GetProcAddress(gLibRTC5, "n_store_encoder");
	n_wait_for_encoder_in_range = (N_WAIT_FOR_ENCODER_IN_RANGE)GetProcAddress(gLibRTC5, "n_wait_for_encoder_in_range");
	n_activate_fly_xy = (N_ACTIVATE_FLY_XY)GetProcAddress(gLibRTC5, "n_activate_fly_xy");
	n_activate_fly_2d = (N_ACTIVATE_FLY_2D)GetProcAddress(gLibRTC5, "n_activate_fly_2d");
	n_if_not_activated = (N_IF_NOT_ACTIVATED)GetProcAddress(gLibRTC5, "n_if_not_activated");
	n_park_position = (N_PARK_POSITION)GetProcAddress(gLibRTC5, "n_park_position");
	n_park_return = (N_PARK_RETURN)GetProcAddress(gLibRTC5, "n_park_return");
	n_wait_for_encoder = (N_WAIT_FOR_ENCODER)GetProcAddress(gLibRTC5, "n_wait_for_encoder");
	fly_return_z = (FLY_RETURN_Z)GetProcAddress(gLibRTC5, "fly_return_z");
	fly_return = (FLY_RETURN)GetProcAddress(gLibRTC5, "fly_return");
	set_rot_center_list = (SET_ROT_CENTER_LIST)GetProcAddress(gLibRTC5, "set_rot_center_list");
	set_ext_start_delay_list = (SET_EXT_START_DELAY_LIST)GetProcAddress(gLibRTC5, "set_ext_start_delay_list");
	set_fly_x = (SET_FLY_X)GetProcAddress(gLibRTC5, "set_fly_x");
	set_fly_y = (SET_FLY_Y)GetProcAddress(gLibRTC5, "set_fly_y");
	set_fly_z = (SET_FLY_Z)GetProcAddress(gLibRTC5, "set_fly_z");
	set_fly_rot = (SET_FLY_ROT)GetProcAddress(gLibRTC5, "set_fly_rot");
	set_fly_2d = (SET_FLY_2D)GetProcAddress(gLibRTC5, "set_fly_2d");
	set_fly_x_pos = (SET_FLY_X_POS)GetProcAddress(gLibRTC5, "set_fly_x_pos");
	set_fly_y_pos = (SET_FLY_Y_POS)GetProcAddress(gLibRTC5, "set_fly_y_pos");
	set_fly_rot_pos = (SET_FLY_ROT_POS)GetProcAddress(gLibRTC5, "set_fly_rot_pos");
	set_fly_limits = (SET_FLY_LIMITS)GetProcAddress(gLibRTC5, "set_fly_limits");
	set_fly_limits_z = (SET_FLY_LIMITS_Z)GetProcAddress(gLibRTC5, "set_fly_limits_z");
	if_fly_x_overflow = (IF_FLY_X_OVERFLOW)GetProcAddress(gLibRTC5, "if_fly_x_overflow");
	if_fly_y_overflow = (IF_FLY_Y_OVERFLOW)GetProcAddress(gLibRTC5, "if_fly_y_overflow");
	if_fly_z_overflow = (IF_FLY_Z_OVERFLOW)GetProcAddress(gLibRTC5, "if_fly_z_overflow");
	if_not_fly_x_overflow = (IF_NOT_FLY_X_OVERFLOW)GetProcAddress(gLibRTC5, "if_not_fly_x_overflow");
	if_not_fly_y_overflow = (IF_NOT_FLY_Y_OVERFLOW)GetProcAddress(gLibRTC5, "if_not_fly_y_overflow");
	if_not_fly_z_overflow = (IF_NOT_FLY_Z_OVERFLOW)GetProcAddress(gLibRTC5, "if_not_fly_z_overflow");
	clear_fly_overflow = (CLEAR_FLY_OVERFLOW)GetProcAddress(gLibRTC5, "clear_fly_overflow");
	set_mcbsp_x_list = (SET_MCBSP_X_LIST)GetProcAddress(gLibRTC5, "set_mcbsp_x_list");
	set_mcbsp_y_list = (SET_MCBSP_Y_LIST)GetProcAddress(gLibRTC5, "set_mcbsp_y_list");
	set_mcbsp_rot_list = (SET_MCBSP_ROT_LIST)GetProcAddress(gLibRTC5, "set_mcbsp_rot_list");
	set_mcbsp_matrix_list = (SET_MCBSP_MATRIX_LIST)GetProcAddress(gLibRTC5, "set_mcbsp_matrix_list");
	set_mcbsp_in_list = (SET_MCBSP_IN_LIST)GetProcAddress(gLibRTC5, "set_mcbsp_in_list");
	set_multi_mcbsp_in_list = (SET_MULTI_MCBSP_IN_LIST)GetProcAddress(gLibRTC5, "set_multi_mcbsp_in_list");
	wait_for_encoder_mode = (WAIT_FOR_ENCODER_MODE)GetProcAddress(gLibRTC5, "wait_for_encoder_mode");
	wait_for_mcbsp = (WAIT_FOR_MCBSP)GetProcAddress(gLibRTC5, "wait_for_mcbsp");
	set_encoder_speed = (SET_ENCODER_SPEED)GetProcAddress(gLibRTC5, "set_encoder_speed");
	get_mcbsp_list = (GET_MCBSP_LIST)GetProcAddress(gLibRTC5, "get_mcbsp_list");
	store_encoder = (STORE_ENCODER)GetProcAddress(gLibRTC5, "store_encoder");
	wait_for_encoder_in_range = (WAIT_FOR_ENCODER_IN_RANGE)GetProcAddress(gLibRTC5, "wait_for_encoder_in_range");
	activate_fly_xy = (ACTIVATE_FLY_XY)GetProcAddress(gLibRTC5, "activate_fly_xy");
	activate_fly_2d = (ACTIVATE_FLY_2D)GetProcAddress(gLibRTC5, "activate_fly_2d");
	if_not_activated = (IF_NOT_ACTIVATED)GetProcAddress(gLibRTC5, "if_not_activated");
	park_position = (PARK_POSITION)GetProcAddress(gLibRTC5, "park_position");
	park_return = (PARK_RETURN)GetProcAddress(gLibRTC5, "park_return");
	wait_for_encoder = (WAIT_FOR_ENCODER)GetProcAddress(gLibRTC5, "wait_for_encoder");
	n_save_and_restart_timer = (N_SAVE_AND_RESTART_TIMER)GetProcAddress(gLibRTC5, "n_save_and_restart_timer");
	n_set_wobbel = (N_SET_WOBBEL)GetProcAddress(gLibRTC5, "n_set_wobbel");
	n_set_wobbel_mode = (N_SET_WOBBEL_MODE)GetProcAddress(gLibRTC5, "n_set_wobbel_mode");
	n_set_wobbel_direction = (N_SET_WOBBEL_DIRECTION)GetProcAddress(gLibRTC5, "n_set_wobbel_direction");
	n_set_wobbel_control = (N_SET_WOBBEL_CONTROL)GetProcAddress(gLibRTC5, "n_set_wobbel_control");
	n_set_wobbel_vector = (N_SET_WOBBEL_VECTOR)GetProcAddress(gLibRTC5, "n_set_wobbel_vector");
	n_set_wobbel_offset = (N_SET_WOBBEL_OFFSET)GetProcAddress(gLibRTC5, "n_set_wobbel_offset");
	n_set_trigger = (N_SET_TRIGGER)GetProcAddress(gLibRTC5, "n_set_trigger");
	n_set_trigger4 = (N_SET_TRIGGER4)GetProcAddress(gLibRTC5, "n_set_trigger4");
	n_set_pixel_line_3d = (N_SET_PIXEL_LINE_3D)GetProcAddress(gLibRTC5, "n_set_pixel_line_3d");
	n_set_pixel_line = (N_SET_PIXEL_LINE)GetProcAddress(gLibRTC5, "n_set_pixel_line");
	n_set_n_pixel = (N_SET_N_PIXEL)GetProcAddress(gLibRTC5, "n_set_n_pixel");
	n_set_pixel = (N_SET_PIXEL)GetProcAddress(gLibRTC5, "n_set_pixel");
	n_rs232_write_text_list = (N_RS232_WRITE_TEXT_LIST)GetProcAddress(gLibRTC5, "n_rs232_write_text_list");
	n_set_mcbsp_out = (N_SET_MCBSP_OUT)GetProcAddress(gLibRTC5, "n_set_mcbsp_out");
	n_camming = (N_CAMMING)GetProcAddress(gLibRTC5, "n_camming");
	n_micro_vector_abs_3d = (N_MICRO_VECTOR_ABS_3D)GetProcAddress(gLibRTC5, "n_micro_vector_abs_3d");
	n_micro_vector_rel_3d = (N_MICRO_VECTOR_REL_3D)GetProcAddress(gLibRTC5, "n_micro_vector_rel_3d");
	n_micro_vector_abs = (N_MICRO_VECTOR_ABS)GetProcAddress(gLibRTC5, "n_micro_vector_abs");
	n_micro_vector_rel = (N_MICRO_VECTOR_REL)GetProcAddress(gLibRTC5, "n_micro_vector_rel");
	n_set_free_variable_list = (N_SET_FREE_VARIABLE_LIST)GetProcAddress(gLibRTC5, "n_set_free_variable_list");
	n_control_command_list = (N_CONTROL_COMMAND_LIST)GetProcAddress(gLibRTC5, "n_control_command_list");
	save_and_restart_timer = (SAVE_AND_RESTART_TIMER)GetProcAddress(gLibRTC5, "save_and_restart_timer");
	set_wobbel = (SET_WOBBEL)GetProcAddress(gLibRTC5, "set_wobbel");
	set_wobbel_mode = (SET_WOBBEL_MODE)GetProcAddress(gLibRTC5, "set_wobbel_mode");
	set_wobbel_direction = (SET_WOBBEL_DIRECTION)GetProcAddress(gLibRTC5, "set_wobbel_direction");
	set_wobbel_control = (SET_WOBBEL_CONTROL)GetProcAddress(gLibRTC5, "set_wobbel_control");
	set_wobbel_vector = (SET_WOBBEL_VECTOR)GetProcAddress(gLibRTC5, "set_wobbel_vector");
	set_wobbel_offset = (SET_WOBBEL_OFFSET)GetProcAddress(gLibRTC5, "set_wobbel_offset");
	set_trigger = (SET_TRIGGER)GetProcAddress(gLibRTC5, "set_trigger");
	set_trigger4 = (SET_TRIGGER4)GetProcAddress(gLibRTC5, "set_trigger4");
	set_pixel_line_3d = (SET_PIXEL_LINE_3D)GetProcAddress(gLibRTC5, "set_pixel_line_3d");
	set_pixel_line = (SET_PIXEL_LINE)GetProcAddress(gLibRTC5, "set_pixel_line");
	set_n_pixel = (SET_N_PIXEL)GetProcAddress(gLibRTC5, "set_n_pixel");
	set_pixel = (SET_PIXEL)GetProcAddress(gLibRTC5, "set_pixel");
	rs232_write_text_list = (RS232_WRITE_TEXT_LIST)GetProcAddress(gLibRTC5, "rs232_write_text_list");
	set_mcbsp_out = (SET_MCBSP_OUT)GetProcAddress(gLibRTC5, "set_mcbsp_out");
	camming = (CAMMING)GetProcAddress(gLibRTC5, "camming");
	micro_vector_abs_3d = (MICRO_VECTOR_ABS_3D)GetProcAddress(gLibRTC5, "micro_vector_abs_3d");
	micro_vector_rel_3d = (MICRO_VECTOR_REL_3D)GetProcAddress(gLibRTC5, "micro_vector_rel_3d");
	micro_vector_abs = (MICRO_VECTOR_ABS)GetProcAddress(gLibRTC5, "micro_vector_abs");
	micro_vector_rel = (MICRO_VECTOR_REL)GetProcAddress(gLibRTC5, "micro_vector_rel");
	set_free_variable_list = (SET_FREE_VARIABLE_LIST)GetProcAddress(gLibRTC5, "set_free_variable_list");
	control_command_list = (CONTROL_COMMAND_LIST)GetProcAddress(gLibRTC5, "control_command_list");
	n_timed_mark_abs_3d = (N_TIMED_MARK_ABS_3D)GetProcAddress(gLibRTC5, "n_timed_mark_abs_3d");
	n_timed_mark_rel_3d = (N_TIMED_MARK_REL_3D)GetProcAddress(gLibRTC5, "n_timed_mark_rel_3d");
	n_timed_mark_abs = (N_TIMED_MARK_ABS)GetProcAddress(gLibRTC5, "n_timed_mark_abs");
	n_timed_mark_rel = (N_TIMED_MARK_REL)GetProcAddress(gLibRTC5, "n_timed_mark_rel");
	timed_mark_abs_3d = (TIMED_MARK_ABS_3D)GetProcAddress(gLibRTC5, "timed_mark_abs_3d");
	timed_mark_rel_3d = (TIMED_MARK_REL_3D)GetProcAddress(gLibRTC5, "timed_mark_rel_3d");
	timed_mark_abs = (TIMED_MARK_ABS)GetProcAddress(gLibRTC5, "timed_mark_abs");
	timed_mark_rel = (TIMED_MARK_REL)GetProcAddress(gLibRTC5, "timed_mark_rel");
	n_mark_abs_3d = (N_MARK_ABS_3D)GetProcAddress(gLibRTC5, "n_mark_abs_3d");
	n_mark_rel_3d = (N_MARK_REL_3D)GetProcAddress(gLibRTC5, "n_mark_rel_3d");
	n_mark_abs = (N_MARK_ABS)GetProcAddress(gLibRTC5, "n_mark_abs");
	n_mark_rel = (N_MARK_REL)GetProcAddress(gLibRTC5, "n_mark_rel");
	mark_abs_3d = (MARK_ABS_3D)GetProcAddress(gLibRTC5, "mark_abs_3d");
	mark_rel_3d = (MARK_REL_3D)GetProcAddress(gLibRTC5, "mark_rel_3d");
	mark_abs = (MARK_ABS)GetProcAddress(gLibRTC5, "mark_abs");
	mark_rel = (MARK_REL)GetProcAddress(gLibRTC5, "mark_rel");
	n_timed_jump_abs_3d = (N_TIMED_JUMP_ABS_3D)GetProcAddress(gLibRTC5, "n_timed_jump_abs_3d");
	n_timed_jump_rel_3d = (N_TIMED_JUMP_REL_3D)GetProcAddress(gLibRTC5, "n_timed_jump_rel_3d");
	n_timed_jump_abs = (N_TIMED_JUMP_ABS)GetProcAddress(gLibRTC5, "n_timed_jump_abs");
	n_timed_jump_rel = (N_TIMED_JUMP_REL)GetProcAddress(gLibRTC5, "n_timed_jump_rel");
	timed_jump_abs_3d = (TIMED_JUMP_ABS_3D)GetProcAddress(gLibRTC5, "timed_jump_abs_3d");
	timed_jump_rel_3d = (TIMED_JUMP_REL_3D)GetProcAddress(gLibRTC5, "timed_jump_rel_3d");
	timed_jump_abs = (TIMED_JUMP_ABS)GetProcAddress(gLibRTC5, "timed_jump_abs");
	timed_jump_rel = (TIMED_JUMP_REL)GetProcAddress(gLibRTC5, "timed_jump_rel");
	n_jump_abs_3d = (N_JUMP_ABS_3D)GetProcAddress(gLibRTC5, "n_jump_abs_3d");
	n_jump_rel_3d = (N_JUMP_REL_3D)GetProcAddress(gLibRTC5, "n_jump_rel_3d");
	n_jump_abs = (N_JUMP_ABS)GetProcAddress(gLibRTC5, "n_jump_abs");
	n_jump_rel = (N_JUMP_REL)GetProcAddress(gLibRTC5, "n_jump_rel");
	jump_abs_3d = (JUMP_ABS_3D)GetProcAddress(gLibRTC5, "jump_abs_3d");
	jump_rel_3d = (JUMP_REL_3D)GetProcAddress(gLibRTC5, "jump_rel_3d");
	jump_abs = (JUMP_ABS)GetProcAddress(gLibRTC5, "jump_abs");
	jump_rel = (JUMP_REL)GetProcAddress(gLibRTC5, "jump_rel");
	n_para_mark_abs_3d = (N_PARA_MARK_ABS_3D)GetProcAddress(gLibRTC5, "n_para_mark_abs_3d");
	n_para_mark_rel_3d = (N_PARA_MARK_REL_3D)GetProcAddress(gLibRTC5, "n_para_mark_rel_3d");
	n_para_mark_abs = (N_PARA_MARK_ABS)GetProcAddress(gLibRTC5, "n_para_mark_abs");
	n_para_mark_rel = (N_PARA_MARK_REL)GetProcAddress(gLibRTC5, "n_para_mark_rel");
	para_mark_abs_3d = (PARA_MARK_ABS_3D)GetProcAddress(gLibRTC5, "para_mark_abs_3d");
	para_mark_rel_3d = (PARA_MARK_REL_3D)GetProcAddress(gLibRTC5, "para_mark_rel_3d");
	para_mark_abs = (PARA_MARK_ABS)GetProcAddress(gLibRTC5, "para_mark_abs");
	para_mark_rel = (PARA_MARK_REL)GetProcAddress(gLibRTC5, "para_mark_rel");
	n_para_jump_abs_3d = (N_PARA_JUMP_ABS_3D)GetProcAddress(gLibRTC5, "n_para_jump_abs_3d");
	n_para_jump_rel_3d = (N_PARA_JUMP_REL_3D)GetProcAddress(gLibRTC5, "n_para_jump_rel_3d");
	n_para_jump_abs = (N_PARA_JUMP_ABS)GetProcAddress(gLibRTC5, "n_para_jump_abs");
	n_para_jump_rel = (N_PARA_JUMP_REL)GetProcAddress(gLibRTC5, "n_para_jump_rel");
	para_jump_abs_3d = (PARA_JUMP_ABS_3D)GetProcAddress(gLibRTC5, "para_jump_abs_3d");
	para_jump_rel_3d = (PARA_JUMP_REL_3D)GetProcAddress(gLibRTC5, "para_jump_rel_3d");
	para_jump_abs = (PARA_JUMP_ABS)GetProcAddress(gLibRTC5, "para_jump_abs");
	para_jump_rel = (PARA_JUMP_REL)GetProcAddress(gLibRTC5, "para_jump_rel");
	n_timed_para_mark_abs_3d = (N_TIMED_PARA_MARK_ABS_3D)GetProcAddress(gLibRTC5, "n_timed_para_mark_abs_3d");
	n_timed_para_mark_rel_3d = (N_TIMED_PARA_MARK_REL_3D)GetProcAddress(gLibRTC5, "n_timed_para_mark_rel_3d");
	n_timed_para_jump_abs_3d = (N_TIMED_PARA_JUMP_ABS_3D)GetProcAddress(gLibRTC5, "n_timed_para_jump_abs_3d");
	n_timed_para_jump_rel_3d = (N_TIMED_PARA_JUMP_REL_3D)GetProcAddress(gLibRTC5, "n_timed_para_jump_rel_3d");
	n_timed_para_mark_abs = (N_TIMED_PARA_MARK_ABS)GetProcAddress(gLibRTC5, "n_timed_para_mark_abs");
	n_timed_para_mark_rel = (N_TIMED_PARA_MARK_REL)GetProcAddress(gLibRTC5, "n_timed_para_mark_rel");
	n_timed_para_jump_abs = (N_TIMED_PARA_JUMP_ABS)GetProcAddress(gLibRTC5, "n_timed_para_jump_abs");
	n_timed_para_jump_rel = (N_TIMED_PARA_JUMP_REL)GetProcAddress(gLibRTC5, "n_timed_para_jump_rel");
	timed_para_mark_abs_3d = (TIMED_PARA_MARK_ABS_3D)GetProcAddress(gLibRTC5, "timed_para_mark_abs_3d");
	timed_para_mark_rel_3d = (TIMED_PARA_MARK_REL_3D)GetProcAddress(gLibRTC5, "timed_para_mark_rel_3d");
	timed_para_jump_abs_3d = (TIMED_PARA_JUMP_ABS_3D)GetProcAddress(gLibRTC5, "timed_para_jump_abs_3d");
	timed_para_jump_rel_3d = (TIMED_PARA_JUMP_REL_3D)GetProcAddress(gLibRTC5, "timed_para_jump_rel_3d");
	timed_para_mark_abs = (TIMED_PARA_MARK_ABS)GetProcAddress(gLibRTC5, "timed_para_mark_abs");
	timed_para_mark_rel = (TIMED_PARA_MARK_REL)GetProcAddress(gLibRTC5, "timed_para_mark_rel");
	timed_para_jump_abs = (TIMED_PARA_JUMP_ABS)GetProcAddress(gLibRTC5, "timed_para_jump_abs");
	timed_para_jump_rel = (TIMED_PARA_JUMP_REL)GetProcAddress(gLibRTC5, "timed_para_jump_rel");
	n_set_defocus_list = (N_SET_DEFOCUS_LIST)GetProcAddress(gLibRTC5, "n_set_defocus_list");
	set_defocus_list = (SET_DEFOCUS_LIST)GetProcAddress(gLibRTC5, "set_defocus_list");
	n_timed_arc_abs = (N_TIMED_ARC_ABS)GetProcAddress(gLibRTC5, "n_timed_arc_abs");
	n_timed_arc_rel = (N_TIMED_ARC_REL)GetProcAddress(gLibRTC5, "n_timed_arc_rel");
	timed_arc_abs = (TIMED_ARC_ABS)GetProcAddress(gLibRTC5, "timed_arc_abs");
	timed_arc_rel = (TIMED_ARC_REL)GetProcAddress(gLibRTC5, "timed_arc_rel");
	n_arc_abs_3d = (N_ARC_ABS_3D)GetProcAddress(gLibRTC5, "n_arc_abs_3d");
	n_arc_rel_3d = (N_ARC_REL_3D)GetProcAddress(gLibRTC5, "n_arc_rel_3d");
	n_arc_abs = (N_ARC_ABS)GetProcAddress(gLibRTC5, "n_arc_abs");
	n_arc_rel = (N_ARC_REL)GetProcAddress(gLibRTC5, "n_arc_rel");
	n_set_ellipse = (N_SET_ELLIPSE)GetProcAddress(gLibRTC5, "n_set_ellipse");
	n_mark_ellipse_abs = (N_MARK_ELLIPSE_ABS)GetProcAddress(gLibRTC5, "n_mark_ellipse_abs");
	n_mark_ellipse_rel = (N_MARK_ELLIPSE_REL)GetProcAddress(gLibRTC5, "n_mark_ellipse_rel");
	arc_abs_3d = (ARC_ABS_3D)GetProcAddress(gLibRTC5, "arc_abs_3d");
	arc_rel_3d = (ARC_REL_3D)GetProcAddress(gLibRTC5, "arc_rel_3d");
	arc_abs = (ARC_ABS)GetProcAddress(gLibRTC5, "arc_abs");
	arc_rel = (ARC_REL)GetProcAddress(gLibRTC5, "arc_rel");
	set_ellipse = (SET_ELLIPSE)GetProcAddress(gLibRTC5, "set_ellipse");
	mark_ellipse_abs = (MARK_ELLIPSE_ABS)GetProcAddress(gLibRTC5, "mark_ellipse_abs");
	mark_ellipse_rel = (MARK_ELLIPSE_REL)GetProcAddress(gLibRTC5, "mark_ellipse_rel");
	n_set_offset_xyz_list = (N_SET_OFFSET_XYZ_LIST)GetProcAddress(gLibRTC5, "n_set_offset_xyz_list");
	n_set_offset_list = (N_SET_OFFSET_LIST)GetProcAddress(gLibRTC5, "n_set_offset_list");
	n_set_matrix_list = (N_SET_MATRIX_LIST)GetProcAddress(gLibRTC5, "n_set_matrix_list");
	n_set_angle_list = (N_SET_ANGLE_LIST)GetProcAddress(gLibRTC5, "n_set_angle_list");
	n_set_scale_list = (N_SET_SCALE_LIST)GetProcAddress(gLibRTC5, "n_set_scale_list");
	n_apply_mcbsp_list = (N_APPLY_MCBSP_LIST)GetProcAddress(gLibRTC5, "n_apply_mcbsp_list");
	set_offset_xyz_list = (SET_OFFSET_XYZ_LIST)GetProcAddress(gLibRTC5, "set_offset_xyz_list");
	set_offset_list = (SET_OFFSET_LIST)GetProcAddress(gLibRTC5, "set_offset_list");
	set_matrix_list = (SET_MATRIX_LIST)GetProcAddress(gLibRTC5, "set_matrix_list");
	set_angle_list = (SET_ANGLE_LIST)GetProcAddress(gLibRTC5, "set_angle_list");
	set_scale_list = (SET_SCALE_LIST)GetProcAddress(gLibRTC5, "set_scale_list");
	apply_mcbsp_list = (APPLY_MCBSP_LIST)GetProcAddress(gLibRTC5, "apply_mcbsp_list");
	n_set_mark_speed = (N_SET_MARK_SPEED)GetProcAddress(gLibRTC5, "n_set_mark_speed");
	n_set_jump_speed = (N_SET_JUMP_SPEED)GetProcAddress(gLibRTC5, "n_set_jump_speed");
	n_set_sky_writing_para_list = (N_SET_SKY_WRITING_PARA_LIST)GetProcAddress(gLibRTC5, "n_set_sky_writing_para_list");
	n_set_sky_writing_list = (N_SET_SKY_WRITING_LIST)GetProcAddress(gLibRTC5, "n_set_sky_writing_list");
	n_set_sky_writing_limit_list = (N_SET_SKY_WRITING_LIMIT_LIST)GetProcAddress(gLibRTC5, "n_set_sky_writing_limit_list");
	n_set_sky_writing_mode_list = (N_SET_SKY_WRITING_MODE_LIST)GetProcAddress(gLibRTC5, "n_set_sky_writing_mode_list");
	n_set_scanner_delays = (N_SET_SCANNER_DELAYS)GetProcAddress(gLibRTC5, "n_set_scanner_delays");
	n_set_jump_mode_list = (N_SET_JUMP_MODE_LIST)GetProcAddress(gLibRTC5, "n_set_jump_mode_list");
	n_enduring_wobbel = (N_ENDURING_WOBBEL)GetProcAddress(gLibRTC5, "n_enduring_wobbel");
	n_set_delay_mode_list = (N_SET_DELAY_MODE_LIST)GetProcAddress(gLibRTC5, "n_set_delay_mode_list");
	set_mark_speed = (SET_MARK_SPEED)GetProcAddress(gLibRTC5, "set_mark_speed");
	set_jump_speed = (SET_JUMP_SPEED)GetProcAddress(gLibRTC5, "set_jump_speed");
	set_sky_writing_para_list = (SET_SKY_WRITING_PARA_LIST)GetProcAddress(gLibRTC5, "set_sky_writing_para_list");
	set_sky_writing_list = (SET_SKY_WRITING_LIST)GetProcAddress(gLibRTC5, "set_sky_writing_list");
	set_sky_writing_limit_list = (SET_SKY_WRITING_LIMIT_LIST)GetProcAddress(gLibRTC5, "set_sky_writing_limit_list");
	set_sky_writing_mode_list = (SET_SKY_WRITING_MODE_LIST)GetProcAddress(gLibRTC5, "set_sky_writing_mode_list");
	set_scanner_delays = (SET_SCANNER_DELAYS)GetProcAddress(gLibRTC5, "set_scanner_delays");
	set_jump_mode_list = (SET_JUMP_MODE_LIST)GetProcAddress(gLibRTC5, "set_jump_mode_list");
	enduring_wobbel = (ENDURING_WOBBEL)GetProcAddress(gLibRTC5, "enduring_wobbel");
	set_delay_mode_list = (SET_DELAY_MODE_LIST)GetProcAddress(gLibRTC5, "set_delay_mode_list");
	n_stepper_enable_list = (N_STEPPER_ENABLE_LIST)GetProcAddress(gLibRTC5, "n_stepper_enable_list");
	n_stepper_control_list = (N_STEPPER_CONTROL_LIST)GetProcAddress(gLibRTC5, "n_stepper_control_list");
	n_stepper_abs_no_list = (N_STEPPER_ABS_NO_LIST)GetProcAddress(gLibRTC5, "n_stepper_abs_no_list");
	n_stepper_rel_no_list = (N_STEPPER_REL_NO_LIST)GetProcAddress(gLibRTC5, "n_stepper_rel_no_list");
	n_stepper_abs_list = (N_STEPPER_ABS_LIST)GetProcAddress(gLibRTC5, "n_stepper_abs_list");
	n_stepper_rel_list = (N_STEPPER_REL_LIST)GetProcAddress(gLibRTC5, "n_stepper_rel_list");
	n_stepper_wait = (N_STEPPER_WAIT)GetProcAddress(gLibRTC5, "n_stepper_wait");
	stepper_enable_list = (STEPPER_ENABLE_LIST)GetProcAddress(gLibRTC5, "stepper_enable_list");
	stepper_control_list = (STEPPER_CONTROL_LIST)GetProcAddress(gLibRTC5, "stepper_control_list");
	stepper_abs_no_list = (STEPPER_ABS_NO_LIST)GetProcAddress(gLibRTC5, "stepper_abs_no_list");
	stepper_rel_no_list = (STEPPER_REL_NO_LIST)GetProcAddress(gLibRTC5, "stepper_rel_no_list");
	stepper_abs_list = (STEPPER_ABS_LIST)GetProcAddress(gLibRTC5, "stepper_abs_list");
	stepper_rel_list = (STEPPER_REL_LIST)GetProcAddress(gLibRTC5, "stepper_rel_list");
	stepper_wait = (STEPPER_WAIT)GetProcAddress(gLibRTC5, "stepper_wait");
	return(0);
}


//  RTC5close
//
//  This function terminates the explicit linking to the RTC5DLL.DLL.
//  Call it when the use of the RTC5 functions is finished.
void RTC5close(void) {
    if(gLibRTC5)
        (void)FreeLibrary(gLibRTC5);

	gLibRTC5 = NULL;
}
